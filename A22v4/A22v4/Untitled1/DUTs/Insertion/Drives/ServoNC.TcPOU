<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="ServoNC" Id="{f939ae28-30bd-4997-8b95-af50702e8d64}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ServoNC EXTENDS FBA_Drive IMPLEMENTS I_EncodedDrive
VAR_OUTPUT	
	ready : BOOL;
	position : LREAL;
	velocity : LREAL;
END_VAR
VAR
	axis : AXIS_REF;
	
	mcReadPosition : MC_ReadActualPosition;
	mcReadVelocity : MC_ReadActualVelocity;
	mcReadError : MC_ReadAxisError;
	mcReset : MC_Reset;
	
	mcPower : MC_Power;
	mcMoveAbsolute : MC_MoveAbsolute;
	mcMoveRelative : MC_MoveRelative;
	mcMoveVelocity : MC_MoveVelocity;
	
	mcSetPosition : MC_SetPosition;
	mcStop : MC_Stop;
END_VAR
VAR_STAT CONSTANT
	targetingVelocity : INT := 500;
	continuousVelocity : INT := 100;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[override();

blocks();

mcReset.Execute := FALSE;
mcMoveAbsolute.Execute := FALSE;
mcMoveRelative.Execute := FALSE;
mcMoveVelocity.Execute := FALSE;
mcSetPosition.Execute := FALSE;
mcStop.Execute := FALSE;

blocks();

ready := bEnable AND NOT busy AND HomeSet;]]></ST>
    </Implementation>
    <Folder Name="Properties" Id="{f4fb86df-136f-4996-9daa-b3b8a4b4fe75}" />
    <Method Name="blocks" Id="{4f4b3711-209a-4326-9f5b-d1908f737531}">
      <Declaration><![CDATA[METHOD PRIVATE blocks : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcReadPosition(
	Axis:= axis, 
	Enable:= TRUE, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	Position=> position);
	
mcReadVelocity(
	Axis:= axis, 
	Enable:= TRUE, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	ActualVelocity=> velocity);
	
mcReadError(
	Axis:= axis, 
	Enable:= TRUE, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	AxisErrorID=> );

mcReset(
	Axis:= axis, 
	Execute:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );

mcPower(
	Axis:= axis, 
	Enable:= bEnable, 
	Enable_Positive:= TRUE, 
	Enable_Negative:= TRUE, 
	Override:= 100, 
	BufferMode:= , 
	Options:= , 
	Status=> , 
	Busy=> , 
	Active=> , 
	Error=> , 
	ErrorID=> );

mcMoveAbsolute(
	Axis:= axis, 
	Execute:= , 
	Position:= , 
	Velocity:= targetingVelocity, 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
mcMoveRelative(
	Axis:= axis, 
	Execute:= , 
	Distance:= ,
	Velocity:= targetingVelocity, 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
mcMoveVelocity( //stopped with stop();
	Axis:= axis, 
	Execute:= , 
	Velocity:= continuousVelocity, 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	Direction:= , 
	BufferMode:= , 
	Options:= , 
	InVelocity=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
mcSetPosition(
	Axis:= axis, 
	Execute:= , 
	Position:= , 
	Mode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );
	
mcStop(
	Axis:= axis, 
	Execute:= , 
	Deceleration:= , 
	Jerk:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );]]></ST>
      </Implementation>
    </Method>
    <Property Name="Busy" Id="{76e617c1-1707-418c-afd8-37e3d0a70099}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Busy : BOOL]]></Declaration>
      <Get Name="Get" Id="{9821e814-6021-4995-a4d6-e74adde35b23}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[busy := 
	mcMoveAbsolute.Busy OR 
	mcMoveRelative.Busy OR 
	mcMoveVelocity.Busy OR 
	mcSetPosition.Busy OR 
	mcReset.Busy OR 
	mcStop.Busy OR 
	step <> 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurrentPosition" Id="{552cdbb0-b891-4b67-ad01-a8cfc1c516eb}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CurrentPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{f42f05dd-f56e-4930-a286-1888d4d594cd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurrentPosition := position;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{cba03562-eb55-4743-94dc-7cf01962b58c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[position := CurrentPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Error" Id="{7daf4b31-4ccd-4ebb-b598-fd16e9795a78}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Error : BOOL]]></Declaration>
      <Get Name="Get" Id="{edbd4fca-a224-4fe5-ba01-ff917580b072}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[error := 
	mcMoveAbsolute.Error OR 
	mcMoveRelative.Error OR 
	mcMoveVelocity.Error OR 
	mcSetPosition.Error OR 
	mcReset.Error OR 
	mcStop.Error OR
	mcReadError.AxisErrorID > 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="homingSequence" Id="{c889c79b-08e7-46ba-b03a-e3652fe9a7a9}">
      <Declaration><![CDATA[METHOD homingSequence : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE step OF
	Homing.IDLE:
		reset();
		IF bEnable THEN
			step := Homing.IN;
		END_IF
		
	Homing.IN:
		IF AtInnerLimit THEN
			mcMoveVelocity.Execute := FALSE;
			step := Homing.OUT;
			RETURN;
		END_IF
		
		mcMoveVelocity.Direction := MC_Negative_Direction;
		mcMoveVelocity.Execute := NOT mcMoveVelocity.Execute;
		
	Homing.OUT:
		IF AtHome THEN //if reached home
			mcMoveVelocity.Execute := FALSE;
			step := Homing.STOP;
			RETURN;
		END_IF
		
		mcMoveVelocity.Direction := MC_Positive_Direction;
		mcMoveVelocity.Execute := NOT mcMoveVelocity.Execute;
		
	Homing.STOP:
		IF velocity = 0 THEN
			mcStop.Execute := FALSE;
			step := Homing.SET;
			RETURN;
		END_IF
		
		mcStop.Execute := TRUE;
		
	Homing.SET:
		IF position = 0 THEN
			mcSetPosition.Execute := FALSE;
			homingSequence := TRUE;
			step := Homing.DONE;
			RETURN;
		END_IF
		
		mcSetPosition.Position := 0;
		mcSetPosition.Execute := TRUE;
		
	Homing.DONE:
		homingComplete := TRUE;
		step := Homing.IDLE;
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveAbsolute" Id="{9a0c1523-e496-48d2-89d9-d71629c86307}">
      <Declaration><![CDATA[METHOD moveAbsolute : BOOL
VAR_INPUT
	newTarget : LREAL;
END_VAR
(*
VAR_OUTPUT
	fault : BOOL;
END_VAR
*)]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT busy AND NOT error THEN
	mcMoveAbsolute.Position := newTarget;
	mcMoveAbsolute.Execute := TRUE;
END_IF

moveAbsolute := (*mcMoveAbsolute.Done AND mcMoveAbsolute.Active;*)
	position = newTarget;]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveContinuous" Id="{c1bd97e2-f7e7-45ed-bf81-7afd3b7c53ff}">
      <Declaration><![CDATA[METHOD moveContinuous : BOOL
VAR_INPUT
	//direction : BOOL; //direction (F = inwards, T = outwards)
	direction : MC_Direction;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
IF mcMoveVelocity.Active THEN
	stop();
END_IF

IF NOT mcStop.Done THEN
	RETURN;
END_IF
*)
(*
IF direction THEN
	mcMoveVelocity.Direction := MC_Positive_Direction;
ELSE
	mcMoveVelocity.Direction := MC_Negative_Direction;
END_IF
*)
mcMoveVelocity.Direction := direction;

IF NOT mcMoveVelocity.Error THEN
	mcMoveVelocity.Execute := TRUE;
	moveContinuous := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveRelative" Id="{a4516e41-c115-4d38-aa54-f9462db8dc0d}">
      <Declaration><![CDATA[METHOD moveRelative : BOOL
VAR_INPUT
	distance : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcMoveRelative.Distance := distance;

moveRelative := mcMoveRelative.Done;]]></ST>
      </Implementation>
    </Method>
    <Method Name="override" Id="{a7beba2b-dce0-49f6-8ab0-472d31bf215f}">
      <Declaration><![CDATA[METHOD PRIVATE override : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
-at home and attempting to traverse outward
-at outer limit and attempting to traverse outward
-at inner limit and attempting to traverse inwards
*)
(*
IF 
	(home AND_THEN (TargetPosition > CurrentPosition OR velocity > 0) ) OR 
	(outerLimit AND_THEN (TargetPosition > CurrentPosition OR velocity > 0) ) OR
	(innerLimit AND_THEN (TargetPosition < CurrentPosition OR velocity < 0) )
THEN
	stop();
END_IF
*)

IF error THEN
	stop();
	reset();
	
ELSIF
	(AtOuterLimit AND velocity < 0) OR
	(AtInnerLimit AND velocity > 0) OR
	(AtHome AND velocity > 0)
THEN
	stop();
END_IF

(*
IF 
	(AtHome AND_THEN (TargetPosition > CurrentPosition OR mcMoveVelocity.Direction = MC_Positive_Direction) ) OR 
	(AtOuterLimit AND_THEN (TargetPosition > CurrentPosition OR mcMoveVelocity.Direction = MC_Positive_Direction) ) OR
	(AtInnerLimit AND_THEN (TargetPosition < CurrentPosition OR mcMoveVelocity.Direction = MC_Negative_Direction) )
THEN
	stop();
END_IF
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="reset" Id="{b7706fbc-8e49-4562-bc6d-21f87f45b14e}">
      <Declaration><![CDATA[METHOD reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcReset.Execute := TRUE;

reset := mcReset.Done;]]></ST>
      </Implementation>
    </Method>
    <Method Name="stop" Id="{131a01d5-9f85-446c-9242-ad02c99596c6}">
      <Declaration><![CDATA[METHOD stop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcStop.Execute := TRUE;

mcMoveAbsolute.Execute := FALSE;
mcMoveRelative.Execute := FALSE;
mcMoveVelocity.Execute := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="TargetPosition" Id="{222c0d80-2607-4af6-8461-be098758948d}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TargetPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{b917e1f8-7faf-4ca9-8c30-5bfbcfdfaf97}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f401d7bc-6585-4a9b-ae06-cd3e51203159}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[moveAbsolute(newTarget := TargetPosition);]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="ServoNC">
      <LineId Id="467" Count="0" />
      <LineId Id="442" Count="0" />
      <LineId Id="436" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="431" Count="4" />
      <LineId Id="427" Count="2" />
      <LineId Id="399" Count="0" />
      <LineId Id="165" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.blocks">
      <LineId Id="86" Count="7" />
      <LineId Id="137" Count="0" />
      <LineId Id="139" Count="6" />
      <LineId Id="138" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="148" Count="6" />
      <LineId Id="147" Count="0" />
      <LineId Id="94" Count="6" />
      <LineId Id="21" Count="1" />
      <LineId Id="101" Count="11" />
      <LineId Id="35" Count="50" />
      <LineId Id="5" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="115" Count="8" />
      <LineId Id="114" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="126" Count="10" />
      <LineId Id="125" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.Busy.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="6" />
    </LineIds>
    <LineIds Name="ServoNC.CurrentPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.CurrentPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.Error.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="5" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.homingSequence">
      <LineId Id="329" Count="1" />
      <LineId Id="382" Count="0" />
      <LineId Id="331" Count="42" />
      <LineId Id="376" Count="1" />
      <LineId Id="379" Count="1" />
      <LineId Id="374" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.moveAbsolute">
      <LineId Id="58" Count="5" />
      <LineId Id="51" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.moveContinuous">
      <LineId Id="37" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="3" />
      <LineId Id="23" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.moveRelative">
      <LineId Id="8" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.override">
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="31" Count="5" />
      <LineId Id="30" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.reset">
      <LineId Id="5" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.stop">
      <LineId Id="9" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.TargetPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.TargetPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>