<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="ClearLinkMC" Id="{d744aa81-29a7-46b1-b24d-c31c9f05bbb2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ClearLinkMC EXTENDS FBA_Drive IMPLEMENTS I_EncodedDrive
VAR_OUTPUT
	pulse AT %Q* : INT;
	brakeRelease AT %Q* : BOOL := TRUE;
	enable : BOOL;
	A : BOOL;
	B : BOOL;
	clear : BOOL;
END_VAR
VAR	
	hlfb AT %I* : REAL := -9999; //high level feedback, if -9999 then servo is idle
	
	outputRegister AT %Q* : INT;
	pulseRequest : INT;
	
	homingDelay : TON;
	resetPulse : TP;
	
	mode : (HOLD, TARGET, CONTINUOUS, RESET_ERR);
	calculation : (IDLE, DOWN, UP, CALCULATE, DONE);
	maxPosition : LREAL;
	
	position, targetPos : LREAL;
	
	pulsePosition : INT;
	pulseCounter : INT;
	rotationsPerPulse : INT; //revolutions per pulse
	displacementPerPulse : LREAL; //displacement per pulse
END_VAR
VAR_STAT CONSTANT
	resetWidth : TIME := T#500MS;
	delayWidth : TIME := T#500MS;
END_VAR
VAR //constructor
	homingDirectionOut : BOOL; 			//homing direction - see <A>
	minPosition : LREAL;
	displacementPerRotation : LREAL; 	//displacement per revolution	
	unitsPerPulse : INT := 800; 		//800 Teknic units per rotation - default setting is 800 units (1 rotation) per pulse
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//M-connector output register
outputRegister.0 := enable AND bEnable; 	//enable
outputRegister.1 := A; 						//direction bit - T = outwards, F = inwards
outputRegister.2 := B; 						//homing bit - after startup, set to TRUE to begin homing, then set to FALSE to finish homing
outputRegister.3 := clear; 					//reset bit

rotationsPerPulse := unitsPerPulse/800; //Teknic constant - 800 units per rotation
displacementPerPulse := displacementPerRotation * rotationsPerPulse;

resetPulse(IN:= , PT:= resetWidth, Q=> clear, ET=> ); //reset pulse

IF NOT enable AND NOT AtInnerLimit THEN
	homingComplete := FALSE;
	step := Homing.IDLE;
	mode := HOLD;
END_IF

override();

CASE mode OF		
	HOLD: //hold current position, no motion
		pulse := 0;
		pulseRequest := 0;
	
	TARGET:	//target a given position
		
		IF WithinTolerance(position, targetPos, displacementPerPulse) THEN
			pulseRequest := 0;
			pulse := 0;
			mode := HOLD;
			
		ELSIF NOT Active THEN
			A :=  position < targetPos;
			(*
			2 options to traverse to a target position:
				a)  send all pulses at once - continuous motion but may exceed limits, check for bounds before setting
				b)  1 pulse at a time - choppy but safer
			*)
			targetPos := MAX(targetPos, minPosition); //if below minPosition, set to minPosition
			targetPos := MIN(targetPos, maxPosition); //if above maxPosition, set to maxPosition
			
			pulseRequest := TO_INT(ABS(position - targetPos)/displacementPerPulse);
			//pulseRequest := 1;
		END_IF
		
	CONTINUOUS: //single pulses in the direction specified by moveContinuous()
		pulseRequest := 1;
		
	RESET_ERR: //reset pulse, servo may need to be rehomed aftewards
		pulse := 0;
		pulseRequest := 0;
		resetPulse.IN := TRUE;
		
		IF resetPulse.Q THEN
			resetPulse.IN := FALSE;
			mode := HOLD;
		END_IF
		
END_CASE

sequence();]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{a55f44a2-9083-4cf6-bb07-ad10c8039df9}" />
    <Folder Name="Properties" Id="{09c34920-e595-4419-9e6a-1d374a321961}" />
    <Property Name="Active" Id="{61e8ee25-8c55-4c26-9b9a-60198cc70df9}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Active : BOOL]]></Declaration>
      <Get Name="Get" Id="{edc87774-1d2b-42ed-8769-c466248bb17d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Active := hlfb <> -9999;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AtOuterLimit" Id="{8a82374d-c0fd-43f5-9867-239e2826b429}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY AtOuterLimit : BOOL]]></Declaration>
      <Get Name="Get" Id="{586a7572-7883-42c3-b1d0-b00bfcc79043}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AtOuterLimit := outerLimit <> limitSensorDefaultState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="calculatePositions" Id="{8f16c4ab-a267-457a-8df5-649585b5006c}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE calculatePositions : BOOL
(*
the purpose of this method is calculate the position at the outer limit

complete a full range traverse while counting the pulses, then multiply
	displacement per rotation
	rotations per pulse
	number of pulses for the traversal
and add to position at inner limit to get position at outer limit
*)]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE calculation OF
	IDLE:
		calculation := DOWN;
		
	DOWN:
		moveContinuous(direction := MC_Negative_Direction);
		IF AtInnerLimit THEN
			calculation := UP;
			pulseCounter := 0;
		END_IF
		
	UP:
		moveContinuous(direction := MC_Positive_Direction);
		IF AtHome THEN
			maxPosition := minPosition + (displacementPerRotation * rotationsPerPulse * pulseCounter);
			calculation := DONE;
		END_IF
		
	DONE:
		calculation := 0;
		calculatePositions := TRUE;
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="CurrentPosition" Id="{cd0ada33-ad48-4d01-802e-efc1f105855e}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CurrentPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{29d1a9eb-007c-489c-b849-8bac757b770b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurrentPosition := position;

//CurrentPosition := pulsePosition * displacementPerPulse;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d8ba53ba-3ed8-4d0c-93b4-51325b3631b5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[position := CurrentPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Error" Id="{32f07930-a5f9-4cd3-91e8-151e5f814e4d}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Error : BOOL]]></Declaration>
      <Get Name="Get" Id="{e73b1977-4e98-4f63-b4e7-689d7c451d52}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="homingSequence" Id="{86f7837c-93cf-4e13-a6c2-058fc3ecd8a6}">
      <Declaration><![CDATA[METHOD homingSequence : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[homingDelay(IN:= , PT:= delayWidth, Q=> , ET=> );

CASE step OF
	Homing.IDLE:
		enable := TRUE;
		A := FALSE;
		B := TRUE;
		brakeRelease := TRUE;
		
		homingComplete := FALSE;
		
		homingDelay.IN := TRUE;
		IF homingDelay.Q THEN
			homingDelay.IN := FALSE;
			//step := Homing.START;
			step := Homing.RETRY;
		END_IF
		
	Homing.START:
		IF homingDelay.Q THEN
			homingDelay.IN := FALSE;
			step := Homing.SET;
			
		ELSIF AtHome THEN
			homingDelay.IN := TRUE;
			
		ELSIF AtOuterLimit THEN
			step := Homing.RETRY;
		
		ELSE
			enable := TRUE;
			A := FALSE;
			B := TRUE;
			brakeRelease := TRUE;
		
		END_IF
	
	Homing.RETRY:
		IF AtInnerLimit THEN
			homingDelay.IN := TRUE;
			enable := FALSE;
			
			IF homingDelay.Q THEN
				homingDelay.IN := FALSE;
				step := Homing.START;
			END_IF
			
		ELSE
			enable := TRUE;
			A := FALSE;
			B := FALSE;
			brakeRelease := TRUE;
			
			mode := CONTINUOUS;
		END_IF

	Homing.SET:
		enable := TRUE;
		A := FALSE;
		B := FALSE;
		brakeRelease := TRUE;
		
		IF calculatePositions() THEN
			step := Homing.DONE;
		END_IF
		
	Homing.DONE:
		homingSequence := homingComplete := TRUE;
		
		pulsePosition := 0;
		
		mode := HOLD;
		step := Homing.IDLE;
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveAbsolute" Id="{88560baf-535b-4c49-ba3b-0a0cfa99d2f3}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD moveAbsolute : BOOL
VAR_INPUT
	newTarget : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF target >= maxPosition AND target <= minPosition THEN
	A :=  position < targetPos;
	targetPos := newTarget;
	mode := TARGET;
	
	moveAbsolute := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveContinuous" Id="{f99c68f7-ba86-4fe8-aa85-53241ec19594}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD moveContinuous : BOOL
VAR_INPUT
	direction : MC_Direction;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF direction = MC_Negative_Direction THEN
	A := FALSE;
ELSIF direction = MC_Positive_Direction THEN
	A := TRUE;
END_IF

mode := CONTINUOUS;]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveRelative" Id="{8bd517ab-9376-4ced-86d5-de6995ad448e}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD moveRelative : BOOL
VAR_INPUT
	distance : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[targetPos := targetPos + distance;

mode := TARGET;]]></ST>
      </Implementation>
    </Method>
    <Method Name="override" Id="{fa4bea4c-ac86-4b77-bca5-3b186042a083}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE override : BOOL
VAR_INPUT
END_VAR
(*
allowable motion is between AtHome and AtInnerLimit
*)]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF AtHome AND NOT Active THEN
	IF homingDirectionOut THEN //homing is outwards
		position := maxPosition;
		pulsePosition := pulseCounter;
	ELSE
		position := minPosition;
		pulsePosition := 0;
	END_IF
	

ELSIF AtInnerLimit AND NOT Active THEN
	IF homingDirectionOut THEN //homing is outwards
		position := minPosition;
		pulsePosition := 0;
	ELSE
		position := maxPosition;
		pulsePosition := pulseCounter;
	END_IF
END_IF

CASE mode OF		
	HOLD:
		//
	
	TARGET:
		IF
			(AtHome AND TargetPosition > CurrentPosition) OR
			(AtInnerLimit AND TargetPosition > CurrentPosition) OR
			(AtOuterLimit AND TargetPosition < CurrentPosition)
		THEN
			mode := HOLD;
		END_IF
		
	CONTINUOUS:
		IF
			(AtHome AND A) OR
			(AtInnerLimit AND A) OR
			(AtOuterLimit AND NOT A)
		THEN
			mode := HOLD;
		END_IF
		
	RESET_ERR:
		//
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="reset" Id="{9b678c8b-c135-4893-8788-b4bdd34ff22a}">
      <Declaration><![CDATA[METHOD reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mode := RESET_ERR;]]></ST>
      </Implementation>
    </Method>
    <Method Name="sequence" Id="{f95740dc-ba15-4e17-97bf-563392e277d0}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE sequence : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Active THEN //servo is active
	IF A THEN //positive direction
		position := position + (displacementPerPulse * pulse);
		pulsePosition := pulsePosition + pulse;
		
		pulseCounter := pulseCounter + pulse;
	ELSE //negative direction
		position := position - (displacementPerPulse * pulse);
		pulsePosition := pulsePosition - pulse;
		
		pulseCounter := pulseCounter - pulse;
	END_IF
	pulse := 0; //pulses already received, can be set to 0 so position change is not compounded

ELSIF pulse = 0 THEN //servo is not active
	pulse := pulseRequest;
END_IF

pulseRequest := 0; //remove this if not working as intended]]></ST>
      </Implementation>
    </Method>
    <Method Name="stop" Id="{189d2f99-1e2a-4d13-add2-ec804cb1845e}">
      <Declaration><![CDATA[METHOD stop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mode := HOLD;]]></ST>
      </Implementation>
    </Method>
    <Property Name="TargetPosition" Id="{fdcbed45-acbb-4605-a02f-d080a640205f}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TargetPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{0334637d-faa5-4ae2-b1a1-1e0941a4cd18}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c4901989-8c3c-4744-8a8a-9bd51b7a40d9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[targetPos := TargetPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="toHome" Id="{2ead79cf-bc58-43af-876b-df13e656be3d}">
      <Declaration><![CDATA[METHOD toHome : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF homingDirectionOut THEN
	moveAbsolute(newTarget := maxPosition);
ELSE
	moveAbsolute(newTarget := minPosition);
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="ClearLinkMC">
      <LineId Id="3402" Count="59" />
      <LineId Id="1839" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.Active.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.AtOuterLimit.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.calculatePositions">
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="5" />
      <LineId Id="43" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="28" Count="3" />
      <LineId Id="54" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.CurrentPosition.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.CurrentPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.Error.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.homingSequence">
      <LineId Id="386" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="136" Count="7" />
      <LineId Id="402" Count="1" />
      <LineId Id="397" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="394" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="389" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="393" Count="0" />
      <LineId Id="349" Count="1" />
      <LineId Id="346" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="355" Count="2" />
      <LineId Id="352" Count="2" />
      <LineId Id="359" Count="0" />
      <LineId Id="309" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="330" Count="1" />
      <LineId Id="342" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="334" Count="2" />
      <LineId Id="338" Count="1" />
      <LineId Id="332" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="380" Count="2" />
      <LineId Id="378" Count="1" />
      <LineId Id="374" Count="2" />
      <LineId Id="362" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="395" Count="1" />
      <LineId Id="185" Count="3" />
      <LineId Id="133" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.moveAbsolute">
      <LineId Id="35" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="44" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.moveContinuous">
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="4" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.moveRelative">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.override">
      <LineId Id="496" Count="44" />
      <LineId Id="142" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.reset">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.sequence">
      <LineId Id="110" Count="2" />
      <LineId Id="142" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="113" Count="1" />
      <LineId Id="141" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="115" Count="1" />
      <LineId Id="136" Count="0" />
      <LineId Id="121" Count="1" />
      <LineId Id="48" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="150" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.stop">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.TargetPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.TargetPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.toHome">
      <LineId Id="21" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>