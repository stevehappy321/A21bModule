<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="ServoNC" Id="{bb489ff1-3ac2-4df2-9f8e-6593599f4fee}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ServoNC EXTENDS FBA_Drive IMPLEMENTS I_EncodedDrive
VAR_OUTPUT	
	ready : BOOL;
	position : LREAL;
	velocity : LREAL;
END_VAR
VAR
	axis : AXIS_REF;
	
	mcReadPosition : MC_ReadActualPosition;
	mcReadVelocity : MC_ReadActualVelocity;
	mcReadError : MC_ReadAxisError;
	mcReset : MC_Reset;
	
	mcPower : MC_Power;
	mcMoveAbsolute : MC_MoveAbsolute;
	mcMoveRelative : MC_MoveRelative;
	mcMoveVelocity : MC_MoveVelocity;
	
	mcSetPosition : MC_SetPosition;
	mcStop : MC_Stop;
END_VAR
VAR_STAT CONSTANT
	targetingVelocity : INT := 500;
	continuousVelocity : INT := 100;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[override();

blocks();

mcReset.Execute := FALSE;
mcMoveAbsolute.Execute := FALSE;
mcMoveRelative.Execute := FALSE;
mcMoveVelocity.Execute := FALSE;
mcSetPosition.Execute := FALSE;
mcStop.Execute := FALSE;

blocks();

ready := bEnable AND NOT Active AND HomeSet;]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{94f08eac-dbd6-4a1e-bdcc-cb414a065eb4}" />
    <Folder Name="Properties" Id="{29bdcbf7-b9bd-446d-8be5-d556a3842a49}" />
    <Property Name="Active" Id="{56a2da6d-8d1b-4f83-92b2-9ea1f87c2d8e}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Active : BOOL]]></Declaration>
      <Get Name="Get" Id="{f234ae15-8868-413a-bfce-6f48ea7cc378}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Active := 
	mcMoveAbsolute.Busy OR 
	mcMoveRelative.Busy OR 
	mcMoveVelocity.Busy OR 
	mcSetPosition.Busy OR 
	mcReset.Busy OR 
	mcStop.Busy OR 
	step <> 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="blocks" Id="{4f63cb06-7dcb-4edd-943f-7b4c1e739caa}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE blocks : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcReadPosition(
	Axis:= axis, 
	Enable:= TRUE, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	Position=> position);
	
mcReadVelocity(
	Axis:= axis, 
	Enable:= TRUE, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	ActualVelocity=> velocity);
	
mcReadError(
	Axis:= axis, 
	Enable:= TRUE, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	AxisErrorID=> );

mcReset(
	Axis:= axis, 
	Execute:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );

mcPower(
	Axis:= axis, 
	Enable:= bEnable, 
	Enable_Positive:= TRUE, 
	Enable_Negative:= TRUE, 
	Override:= 100, 
	BufferMode:= , 
	Options:= , 
	Status=> , 
	Busy=> , 
	Active=> , 
	Error=> , 
	ErrorID=> );

mcMoveAbsolute(
	Axis:= axis, 
	Execute:= , 
	Position:= , 
	Velocity:= targetingVelocity, 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
mcMoveRelative(
	Axis:= axis, 
	Execute:= , 
	Distance:= ,
	Velocity:= targetingVelocity, 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
mcMoveVelocity( //stopped with stop();
	Axis:= axis, 
	Execute:= , 
	Velocity:= continuousVelocity, 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	Direction:= , 
	BufferMode:= , 
	Options:= , 
	InVelocity=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
mcSetPosition(
	Axis:= axis, 
	Execute:= , 
	Position:= , 
	Mode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );
	
mcStop(
	Axis:= axis, 
	Execute:= , 
	Deceleration:= , 
	Jerk:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );]]></ST>
      </Implementation>
    </Method>
    <Property Name="CurrentPosition" Id="{543db0b5-6340-4956-a560-303a0c9d858d}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CurrentPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{961ec8ce-d029-49e4-afed-a15fd3c4099a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurrentPosition := position;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{7790d45a-a505-4db9-b57a-0f249d291eda}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[position := CurrentPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Error" Id="{4442e834-c433-49b0-80b7-e71b4f882d8e}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Error : BOOL]]></Declaration>
      <Get Name="Get" Id="{4f349302-2e58-4461-b38f-ba1f4f81301c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[error := 
	mcMoveAbsolute.Error OR 
	mcMoveRelative.Error OR 
	mcMoveVelocity.Error OR 
	mcSetPosition.Error OR 
	mcReset.Error OR 
	mcStop.Error OR
	mcReadError.AxisErrorID > 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="homingSequence" Id="{f083fc12-10be-475b-b5ad-e0e54c600219}">
      <Declaration><![CDATA[METHOD homingSequence : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE step OF
	Homing.IDLE:
		reset();
		IF bEnable THEN
			step := Homing.START;
		END_IF
		
	Homing.START:
		IF AtHome THEN
			mcMoveVelocity.Execute := FALSE;
			step := Homing.STOP;
			
		ELSIF AtInnerLimit THEN
			mcMoveVelocity.Execute := FALSE;
			step := Homing.RETRY;
			
		ELSE
			mcMoveVelocity.Direction := MC_Negative_Direction;
			mcMoveVelocity.Execute := NOT mcMoveVelocity.Execute;
		END_IF
		
	Homing.RETRY:
		IF AtOuterLimit THEN
			mcMoveVelocity.Execute := FALSE;
			step := Homing.START;
		ELSE
			mcMoveVelocity.Direction := MC_Positive_Direction;
			mcMoveVelocity.Execute := NOT mcMoveVelocity.Execute;
		END_IF
		
	Homing.STOP:
		IF velocity = 0 THEN
			mcStop.Execute := FALSE;
			step := Homing.SET;
		ELSE
			mcStop.Execute := TRUE;
		END_IF
		
	Homing.SET:
		IF position = 0 THEN
			mcSetPosition.Execute := FALSE;
			homingSequence := TRUE;
			step := Homing.DONE;
		ELSE
			mcSetPosition.Position := 0;
			mcSetPosition.Execute := TRUE;
		END_IF
		
	Homing.DONE:
		homingComplete := TRUE;
		step := Homing.IDLE;
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveAbsolute" Id="{98b6f5bc-d22b-4bd2-89f6-c4bb4f9735b3}">
      <Declaration><![CDATA[METHOD moveAbsolute : BOOL
VAR_INPUT
	newTarget : LREAL;
END_VAR
(*
VAR_OUTPUT
	fault : BOOL;
END_VAR
*)]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Active AND NOT error THEN
	mcMoveAbsolute.Position := newTarget;
	mcMoveAbsolute.Execute := TRUE;
END_IF

moveAbsolute := (*mcMoveAbsolute.Done AND mcMoveAbsolute.Active;*)
	position = newTarget;]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveContinuous" Id="{af66a590-1991-49ac-a629-d3f855ed14a2}">
      <Declaration><![CDATA[METHOD moveContinuous : BOOL
VAR_INPUT
	//direction : BOOL; //direction (F = inwards, T = outwards)
	direction : MC_Direction;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
IF mcMoveVelocity.Active THEN
	stop();
END_IF

IF NOT mcStop.Done THEN
	RETURN;
END_IF
*)
(*
IF direction THEN
	mcMoveVelocity.Direction := MC_Positive_Direction;
ELSE
	mcMoveVelocity.Direction := MC_Negative_Direction;
END_IF
*)
mcMoveVelocity.Direction := direction;

IF NOT mcMoveVelocity.Error THEN
	mcMoveVelocity.Execute := TRUE;
	moveContinuous := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveRelative" Id="{aea46495-93af-47b8-9cbc-949106d2ff4b}">
      <Declaration><![CDATA[METHOD moveRelative : BOOL
VAR_INPUT
	distance : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcMoveRelative.Distance := distance;

moveRelative := mcMoveRelative.Done;]]></ST>
      </Implementation>
    </Method>
    <Method Name="override" Id="{9198b082-7fc7-4784-89da-f40da24b33ce}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE override : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
-at home and attempting to traverse outward
-at outer limit and attempting to traverse outward
-at inner limit and attempting to traverse inwards
*)
(*
inward = negative direction, negative velocity
outward = positive direction, positive velocity
*)

IF error THEN
	stop();
	reset();
	
ELSIF
	AtHome AND (TargetPosition > CurrentPosition OR velocity > 0) OR
	AtInnerLimit AND (TargetPosition > CurrentPosition OR velocity > 0) OR
	AtOuterLimit AND (TargetPosition < CurrentPosition OR velocity < 0)
THEN
	stop();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="reset" Id="{6ffa5af9-c14c-41dc-b194-ebef8b377ecd}">
      <Declaration><![CDATA[METHOD reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcReset.Execute := TRUE;

reset := mcReset.Done;]]></ST>
      </Implementation>
    </Method>
    <Method Name="stop" Id="{4dccf70c-31b8-4d3e-a0e2-7db314723f88}">
      <Declaration><![CDATA[METHOD stop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcStop.Execute := TRUE;

mcMoveAbsolute.Execute := FALSE;
mcMoveRelative.Execute := FALSE;
mcMoveVelocity.Execute := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="TargetPosition" Id="{b7fb16bd-29bf-4c77-ae2f-26ec2a5a948a}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TargetPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{79e8370a-38ac-4b91-b49f-4b3721461425}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3a85e76a-1c49-481e-8f9a-ba154f52f482}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[moveAbsolute(newTarget := TargetPosition);]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="toHome" Id="{863f6818-a649-4d05-aa71-7f25c03f5145}">
      <Declaration><![CDATA[METHOD toHome : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[moveAbsolute(newTarget := 0);

toHome := AtHome;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="ServoNC">
      <LineId Id="493" Count="12" />
      <LineId Id="165" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.Active.Get">
      <LineId Id="14" Count="6" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.blocks">
      <LineId Id="86" Count="7" />
      <LineId Id="137" Count="0" />
      <LineId Id="139" Count="6" />
      <LineId Id="138" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="148" Count="6" />
      <LineId Id="147" Count="0" />
      <LineId Id="94" Count="6" />
      <LineId Id="21" Count="1" />
      <LineId Id="101" Count="11" />
      <LineId Id="35" Count="50" />
      <LineId Id="5" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="115" Count="8" />
      <LineId Id="114" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="126" Count="10" />
      <LineId Id="125" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.CurrentPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.CurrentPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.Error.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="5" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.homingSequence">
      <LineId Id="439" Count="51" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.moveAbsolute">
      <LineId Id="72" Count="5" />
      <LineId Id="51" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.moveContinuous">
      <LineId Id="37" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="3" />
      <LineId Id="23" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.moveRelative">
      <LineId Id="8" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.override">
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="71" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="65" Count="3" />
      <LineId Id="70" Count="0" />
      <LineId Id="69" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.reset">
      <LineId Id="5" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.stop">
      <LineId Id="9" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.TargetPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.TargetPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ServoNC.toHome">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>