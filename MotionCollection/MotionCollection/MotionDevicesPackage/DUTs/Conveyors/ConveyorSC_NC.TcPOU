<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="ConveyorSC_NC" Id="{1a3c206e-0069-4a63-babe-f3447b402daa}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ConveyorSC_NC
VAR_INPUT
	bEnable : BOOL;
END_VAR
VAR_OUTPUT
	sensorEntry AT %I* : BOOL := TRUE;
	sensorExit AT %I* : BOOL := TRUE;
	
	trueMode : ConveyorMode;
	requestedMode : ConveyorMode;
	
	position : LREAL;
	velocity : LREAL;
	ready : BOOL;
END_VAR
VAR
	axis : AXIS_REF;
	
	mcReadPosition : MC_ReadActualPosition; //continuous enable FBs
	mcReadVelocity : MC_ReadActualVelocity;
	mcReadError : MC_ReadAxisError;
	mcPower : MC_Power;
	
	mcReset : MC_Reset; //rising edge FBs
	mcMoveAbsolute : MC_MoveAbsolute;
	mcMoveRelative : MC_MoveRelative;
	mcMoveVelocity : MC_MoveVelocity;
	
	mcSetPosition : MC_SetPosition;
	mcStop : MC_Stop;
END_VAR
VAR_STAT CONSTANT
	targetingVelocity : INT := 500;
	continuousVelocity : INT := 500;
END_VAR
(*
this FB represents a standard slat conveyor with no lifter
	compliant with PLCopen motion control

unlike standalone servos,
	conveyors need to coordinate (not slave) their motion with other conveyors
	and be able to set their current position to any value as required by the system
	
moveAbsolute is provided for now but should not be used for position targetting and may be protected/privated later
instead, request/set the operation mode and the motion will follow
*)]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF error THEN
	stop();
	reset();
	
ELSE
	CASE trueMode OF
		ConveyorMode.IDLE:			stop();	
		ConveyorMode.FORWARD:		moveContinuous(direction:= MC_Positive_Direction);
		ConveyorMode.BACKWARD:		moveContinuous(direction:= MC_Negative_Direction);
		ConveyorMode.STOP:			stop();
	END_CASE
	
END_IF

blocks();

mcReset.Execute := FALSE;
mcMoveAbsolute.Execute := FALSE;
mcMoveRelative.Execute := FALSE;
mcMoveVelocity.Execute := FALSE;
mcSetPosition.Execute := FALSE;
mcStop.Execute := FALSE;

blocks();]]></ST>
    </Implementation>
    <Folder Name="OpMode" Id="{7126b177-f7bc-483e-a256-95db5f12c9e4}" />
    <Folder Name="Private" Id="{27aadce1-d903-452f-adb2-54f83ddb3a5f}" />
    <Folder Name="Properties" Id="{fc9cf1c4-a3bd-45bb-98c1-7e5f7668ac56}" />
    <Property Name="Active" Id="{8577ae16-3f9d-4ebf-87f7-665ddde652c7}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Active : BOOL]]></Declaration>
      <Get Name="Get" Id="{fda9c8e0-be6a-4c77-ab1c-5aee09adb92c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Active := 
	mcMoveAbsolute.Busy OR 
	mcMoveRelative.Busy OR 
	mcMoveVelocity.Busy OR 
	mcSetPosition.Busy OR 
	mcReset.Busy OR 
	mcStop.Busy;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="blocks" Id="{5e2d39b4-dd14-4752-a684-95c0c1657fc2}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE blocks : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcReadPosition(
	Axis:= axis, 
	Enable:= TRUE, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	Position=> position);
	
mcReadVelocity(
	Axis:= axis, 
	Enable:= TRUE, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	ActualVelocity=> velocity);
	
mcReadError(
	Axis:= axis, 
	Enable:= TRUE, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	AxisErrorID=> );
	
mcPower(
	Axis:= axis, 
	Enable:= bEnable, 
	Enable_Positive:= TRUE, 
	Enable_Negative:= TRUE, 
	Override:= 100, 
	BufferMode:= , 
	Options:= , 
	Status=> , 
	Busy=> , 
	Active=> , 
	Error=> , 
	ErrorID=> );

mcReset(
	Axis:= axis, 
	Execute:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );

mcMoveAbsolute(
	Axis:= axis, 
	Execute:= , 
	Position:= , 
	Velocity:= targetingVelocity, 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
mcMoveRelative(
	Axis:= axis, 
	Execute:= , 
	Distance:= ,
	Velocity:= targetingVelocity, 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
mcMoveVelocity( //stopped with stop();
	Axis:= axis, 
	Execute:= , 
	Velocity:= continuousVelocity, 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	Direction:= , 
	BufferMode:= , 
	Options:= , 
	InVelocity=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
mcSetPosition(
	Axis:= axis, 
	Execute:= , 
	Position:= , 
	Mode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );
	
mcStop(
	Axis:= axis, 
	Execute:= , 
	Deceleration:= , 
	Jerk:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );]]></ST>
      </Implementation>
    </Method>
    <Property Name="CurrentPosition" Id="{91176e7f-8c37-4654-ae4a-37c923738f16}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CurrentPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{daa93656-cb6e-4912-a464-1654f86ffd26}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurrentPosition := position;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c9022b20-e9cd-4a9c-99e3-78163e746db2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[position := CurrentPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Error" Id="{17949c08-c0bf-41ef-bbc6-5c7512a312ee}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Error : BOOL]]></Declaration>
      <Get Name="Get" Id="{05305283-5e7a-42ce-9f39-02b3a802344d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[error := 
	mcMoveAbsolute.Error OR 
	mcMoveRelative.Error OR 
	mcMoveVelocity.Error OR 
	mcSetPosition.Error OR 
	mcReset.Error OR 
	mcStop.Error OR
	mcReadError.AxisErrorID > 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsOccupied" Id="{fa852f38-dc7b-45c2-a409-f05c12c19ba6}" FolderPath="Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY IsOccupied : BOOL]]></Declaration>
      <Get Name="Get" Id="{1a019571-aaa0-4752-990b-625c112713fd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsOccupied := sensorExit OR sensorEntry;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="moveAbsolute" Id="{890fa2cb-8f94-4e6f-8a1d-a12b54a341ab}">
      <Declaration><![CDATA[METHOD moveAbsolute : BOOL
VAR_INPUT
	newTarget : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcMoveAbsolute.Position := newTarget;

IF NOT Active AND NOT error THEN
	mcMoveAbsolute.Execute := TRUE;
END_IF

moveAbsolute := 
	//mcMoveAbsolute.Done;
	CurrentPosition = TargetPosition;]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveContinuous" Id="{fcb4ecba-00d9-4b29-9ddc-24c3b2555d93}">
      <Declaration><![CDATA[METHOD moveContinuous : BOOL
VAR_INPUT
	direction : MC_Direction;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcMoveVelocity.Direction := direction;

IF NOT Active AND NOT error THEN
	mcMoveVelocity.Execute := TRUE;
	moveContinuous := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="reset" Id="{c7e6f6a2-38c5-4a94-8683-e5362479dd88}">
      <Declaration><![CDATA[METHOD reset : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcReset.Execute := TRUE;

reset := mcReset.Done;]]></ST>
      </Implementation>
    </Method>
    <Method Name="setMode" Id="{44be4b30-7778-4d9e-bcd2-ac7c57f30f08}" FolderPath="OpMode\">
      <Declaration><![CDATA[METHOD setMode : BOOL
VAR_INPUT
	mode : ConveyorMode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[trueMode := mode;]]></ST>
      </Implementation>
    </Method>
    <Method Name="setRequest" Id="{a7a6efa5-83c8-4394-aa6b-cbbdb4d865d8}" FolderPath="OpMode\">
      <Declaration><![CDATA[METHOD setRequest : BOOL
VAR_INPUT
	newRequest : ConveyorMode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[requestedMode := newRequest;]]></ST>
      </Implementation>
    </Method>
    <Method Name="stop" Id="{2153e19f-9e1a-430b-9392-9f8b157e93fb}">
      <Declaration><![CDATA[METHOD stop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcStop.Execute := TRUE;

mcMoveAbsolute.Execute := FALSE;
mcMoveRelative.Execute := FALSE;
mcMoveVelocity.Execute := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="TargetPosition" Id="{96dde37d-ab48-4cb5-8241-1a2ed5f503b8}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TargetPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{e8b2fd3d-b8b4-4412-a8d1-07730f90936c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{98ece328-8848-405c-a0c3-d9ad9e7e12c8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[moveAbsolute(newTarget := TargetPosition);]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="ConveyorSC_NC">
      <LineId Id="827" Count="2" />
      <LineId Id="834" Count="0" />
      <LineId Id="826" Count="0" />
      <LineId Id="831" Count="1" />
      <LineId Id="790" Count="0" />
      <LineId Id="792" Count="0" />
      <LineId Id="794" Count="0" />
      <LineId Id="788" Count="0" />
      <LineId Id="835" Count="0" />
      <LineId Id="786" Count="0" />
      <LineId Id="833" Count="0" />
      <LineId Id="736" Count="1" />
      <LineId Id="813" Count="4" />
      <LineId Id="743" Count="1" />
      <LineId Id="352" Count="0" />
    </LineIds>
    <LineIds Name="ConveyorSC_NC.Active.Get">
      <LineId Id="14" Count="6" />
    </LineIds>
    <LineIds Name="ConveyorSC_NC.blocks">
      <LineId Id="86" Count="7" />
      <LineId Id="137" Count="0" />
      <LineId Id="139" Count="6" />
      <LineId Id="138" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="148" Count="6" />
      <LineId Id="147" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="157" Count="11" />
      <LineId Id="156" Count="0" />
      <LineId Id="94" Count="6" />
      <LineId Id="21" Count="0" />
      <LineId Id="36" Count="49" />
      <LineId Id="5" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="115" Count="8" />
      <LineId Id="114" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="126" Count="10" />
      <LineId Id="125" Count="0" />
    </LineIds>
    <LineIds Name="ConveyorSC_NC.CurrentPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ConveyorSC_NC.CurrentPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ConveyorSC_NC.Error.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="5" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="ConveyorSC_NC.IsOccupied.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ConveyorSC_NC.moveAbsolute">
      <LineId Id="20" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="22" Count="4" />
    </LineIds>
    <LineIds Name="ConveyorSC_NC.moveContinuous">
      <LineId Id="39" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="ConveyorSC_NC.reset">
      <LineId Id="9" Count="1" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="ConveyorSC_NC.setMode">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ConveyorSC_NC.setRequest">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ConveyorSC_NC.stop">
      <LineId Id="9" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="ConveyorSC_NC.TargetPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ConveyorSC_NC.TargetPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>