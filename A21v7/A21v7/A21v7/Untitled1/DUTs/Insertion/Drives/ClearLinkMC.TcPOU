<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="ClearLinkMC" Id="{82d395c8-897a-4c3b-989f-b99dc8146760}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ClearLinkMC EXTENDS FBA_Drive IMPLEMENTS I_EncodedDrive
VAR_OUTPUT
	pulse AT %Q* : INT; //num pulses
	outputRegister AT %Q* : INT;
	brakeRelease AT %Q* : BOOL;
	
	A : BOOL; //direction (F = inwards, T = outwards)
	B : BOOL; //home bit
	clear : BOOL;
	
	hlfb AT %I* : REAL := -9999; //high level feedback, if -9999 then servo is idle
	position, targetPos : LREAL;
END_VAR
VAR
	pulseRequest : INT;
	
	minHoming : TON;
	resetTimer : TP;
	
	mode : (DISABLE, HOLD, TARGET, CONTINUOUS, RESET_ERR);
END_VAR
VAR_STAT CONSTANT
	resetTime : TIME := T#1000MS;
	unitsPerPulse : INT := 800; //800 Teknic units per revolution
	distancePerPulse : INT := 5; //5mm per revolution
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//M-connector output register
outputRegister.0 := bEnable; 	//enable
outputRegister.1 := A; 			//direction bit
outputRegister.2 := B; 			//homing bit - set to TRUE after startup to begin homing, then set to FALSE to finish homing
outputRegister.3 := clear; 		//reset bit

resetTimer(IN:= , PT:= resetTime, Q=> clear, ET=> ); //reset timer

IF NOT bEnable THEN
	homingComplete := FALSE;
	mode := HOLD;
END_IF

override(); //if sensor limits are reached, this method blocks motion that would exceed the limits

CASE mode OF		
	HOLD: //hold current position, no motion
		pulse := 0;
		pulseRequest := 0;
	
	TARGET:	//target a given position
		IF WithinTolerance(position, targetPos, distancePerPulse) THEN
			pulseRequest := 0;
			mode := HOLD;
			
		ELSIF NOT Busy THEN
			A :=  position < targetPos;
			//pulseRequest := TO_INT(ABS(position - targetPos)/distancePerPulse);
			pulseRequest := 1;
			
		END_IF
		
	CONTINUOUS: //single pulses in the direction specified by moveContinuous()
		pulseRequest := 1;
		
	RESET_ERR: //reset pulse, servo may need to be rehomed aftewards
		pulse := 0;
		pulseRequest := 0;
		resetTimer.IN := TRUE;
		
		IF resetTimer.Q THEN
			resetTimer.IN := FALSE;
			mode := HOLD;
		END_IF
		
END_CASE

sequence();]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{8d4dfb4b-1bc0-44fe-833d-9a6610663d13}" />
    <Folder Name="Properties" Id="{f4fb86df-136f-4996-9daa-b3b8a4b4fe75}" />
    <Property Name="Busy" Id="{76e617c1-1707-418c-afd8-37e3d0a70099}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Busy : BOOL]]></Declaration>
      <Get Name="Get" Id="{9821e814-6021-4995-a4d6-e74adde35b23}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := hlfb <> -9999;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CurrentPosition" Id="{552cdbb0-b891-4b67-ad01-a8cfc1c516eb}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CurrentPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{f42f05dd-f56e-4930-a286-1888d4d594cd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurrentPosition := position;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{cba03562-eb55-4743-94dc-7cf01962b58c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[position := CurrentPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Error" Id="{7daf4b31-4ccd-4ebb-b598-fd16e9795a78}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Error : BOOL]]></Declaration>
      <Get Name="Get" Id="{edbd4fca-a224-4fe5-ba01-ff917580b072}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="homingSequence" Id="{ed7f9015-f217-4688-b191-db86d43e2b15}">
      <Declaration><![CDATA[METHOD homingSequence : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[minHoming(IN:= , PT:= T#1S, Q=> , ET=> ); //IN and OUT should be held for at least 1 second - may be removed for deployment

IF NOT bEnable THEN //homing does not begin until software enable
	RETURN;
END_IF

CASE step OF
	Homing.IDLE:
		bEnable := FALSE;
		A := FALSE;
		B := FALSE;
		brakeRelease := TRUE;
		
		homingComplete := FALSE;
		step := Homing.IN;
		
	Homing.IN: //let insertion drop to inner limit before homing
		bEnable := FALSE;
		A := FALSE;
		B := FALSE;
		brakeRelease := TRUE;
		
		minHoming.IN := TRUE;
		
		IF NOT innerLimit AND minHoming.Q THEN
			minHoming.IN := FALSE;
			step := Homing.OUT;
		END_IF
	
	Homing.OUT:
		bEnable := TRUE;
		A := FALSE;
		B := TRUE;
		brakeRelease := TRUE;
		
		minHoming.IN := TRUE;
		
		IF NOT home AND minHoming.Q THEN
			minHoming.IN := FALSE;
			step := Homing.DONE;
		END_IF
		
	Homing.DONE:
		bEnable := TRUE;
		A := FALSE;
		B := FALSE;
		brakeRelease := TRUE;
			
		position := 0;
		
		homingComplete := TRUE;
		homingSequence := TRUE;
		
		mode := HOLD;
		step := Homing.IDLE;
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveAbsolute" Id="{dc77def1-bef9-43df-afd0-8ca352bd4ae2}">
      <Declaration><![CDATA[METHOD moveAbsolute : BOOL
VAR_INPUT
	newTarget : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[targetPos := newTarget;
mode := TARGET;]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveContinuous" Id="{56e37924-ed1f-434c-b8b5-86f83bcd5e14}">
      <Declaration><![CDATA[METHOD moveContinuous : BOOL
VAR_INPUT
	direction : MC_Direction;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF direction = MC_Negative_Direction THEN
	A := FALSE;
ELSIF direction = MC_Positive_Direction THEN
	A := TRUE;
END_IF

mode := CONTINUOUS;]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveRelative" Id="{1770bae9-9ea8-4155-8a6e-b332d1abb598}">
      <Declaration><![CDATA[METHOD moveRelative : BOOL
VAR_INPUT
	distance : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[targetPos := targetPos + distance;

mode := TARGET;]]></ST>
      </Implementation>
    </Method>
    <Method Name="override" Id="{12f80332-3269-42b5-a267-e03e0f51e546}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE override : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
IF (*NOT*) home THEN //block outwards motion
	position := 0;
	IF A THEN
		mode := HOLD;
	END_IF
	
ELSIF (*NOT*) outerLimit AND_THEN A THEN //block outwards motion
	mode := HOLD;

ELSIF (*NOT*) innerLimit AND_THEN NOT A THEN //block inwards motion
	mode := HOLD;
	
END_IF
*)


IF
	((*NOT*) home AND_THEN A) OR
	((*NOT*) outerLimit AND_THEN A) OR
	((*NOT*) innerLimit AND_THEN NOT A)
THEN
	mode := HOLD;
END_IF


IF (*NOT*) home THEN //block outwards motion
	position := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="reset" Id="{b78ab13d-678d-4b52-8830-ac5e90a85d68}">
      <Declaration><![CDATA[METHOD reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mode := RESET_ERR;]]></ST>
      </Implementation>
    </Method>
    <Method Name="sequence" Id="{d3e76146-deb6-4a1c-bf00-057dae828590}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE sequence : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Busy THEN //servo is active
	IF A THEN //positive direction
		position := position + (distancePerPulse * pulse);
	ELSE //negative direction
		position := position - (distancePerPulse * pulse);
	END_IF
	pulse := 0; //pulses already received, can be set to 0 so position change is not compounded

ELSIF pulse = 0 THEN //servo is not active
	pulse := pulseRequest;
	pulseRequest := 0; //remove this if not working as intended
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="stop" Id="{b371037c-73c2-41cf-af60-cf703d5e079a}">
      <Declaration><![CDATA[METHOD stop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mode := HOLD;]]></ST>
      </Implementation>
    </Method>
    <Property Name="TargetPosition" Id="{222c0d80-2607-4af6-8461-be098758948d}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TargetPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{b917e1f8-7faf-4ca9-8c30-5bfbcfdfaf97}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f401d7bc-6585-4a9b-ae06-cd3e51203159}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[targetPos := TargetPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="ClearLinkMC">
      <LineId Id="2403" Count="11" />
      <LineId Id="2420" Count="14" />
      <LineId Id="2440" Count="19" />
      <LineId Id="1839" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.Busy.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.CurrentPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.CurrentPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.Error.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.homingSequence">
      <LineId Id="134" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="191" Count="1" />
      <LineId Id="190" Count="0" />
      <LineId Id="135" Count="33" />
      <LineId Id="171" Count="7" />
      <LineId Id="195" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="183" Count="5" />
      <LineId Id="133" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.moveAbsolute">
      <LineId Id="16" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.moveContinuous">
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="4" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.moveRelative">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.override">
      <LineId Id="37" Count="16" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="27" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="30" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.reset">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.sequence">
      <LineId Id="110" Count="6" />
      <LineId Id="136" Count="0" />
      <LineId Id="121" Count="1" />
      <LineId Id="132" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="48" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.stop">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.TargetPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkMC.TargetPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>