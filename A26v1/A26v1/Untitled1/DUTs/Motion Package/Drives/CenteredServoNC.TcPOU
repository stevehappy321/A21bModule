<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="CenteredServoNC" Id="{d83278cc-d89e-4d4d-8a02-4a5676c7e52c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CenteredServoNC EXTENDS FBA_TrifectaDrive IMPLEMENTS I_EncodedDrive
VAR_OUTPUT	
	ready : BOOL;
	position : LREAL;
	velocity : LREAL;
END_VAR
VAR
	axis : AXIS_REF;
	
	mcReadPosition : MC_ReadActualPosition; //continuous enable FBs
	mcReadVelocity : MC_ReadActualVelocity;
	mcReadError : MC_ReadAxisError;
	mcPower : MC_Power;
	
	mcReset : MC_Reset; //rising edge FBs
	mcMoveAbsolute : MC_MoveAbsolute;
	mcMoveRelative : MC_MoveRelative;
	mcMoveVelocity : MC_MoveVelocity;
	
	mcSetPosition : MC_SetPosition;
	mcStop : MC_Stop;
END_VAR
VAR_STAT CONSTANT
	targetingVelocity : INT := 500;
	continuousVelocity : INT := 100;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
NOTE:
	this servo is almost identical to ServoNC, only difference being this servo can travel to both left and right limits
	the entire motion control heirarchy is messy and needs reworking
*)

override();

blocks();

mcReset.Execute := FALSE;
mcMoveAbsolute.Execute := FALSE;
mcMoveRelative.Execute := FALSE;
mcMoveVelocity.Execute := FALSE;
mcSetPosition.Execute := FALSE;
mcStop.Execute := FALSE;

blocks();

ready := bEnable AND NOT Active AND HomeSet;]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{411036ba-e803-417c-919c-3c1a3d76efa1}" />
    <Folder Name="Properties" Id="{6fc8d316-d473-458a-8fc9-1e798627e762}" />
    <Property Name="Active" Id="{7dfca73f-a772-455e-b888-c4efdb0db218}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Active : BOOL]]></Declaration>
      <Get Name="Get" Id="{0c0b15d1-3080-49cd-bb8c-cdecdb4b1b48}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Active := 
	mcMoveAbsolute.Busy OR 
	mcMoveRelative.Busy OR 
	mcMoveVelocity.Busy OR 
	mcSetPosition.Busy OR 
	mcReset.Busy OR 
	mcStop.Busy OR 
	step <> 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="blocks" Id="{845caff5-9b67-4804-8c86-5c4ab031ef06}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE blocks : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcReadPosition(
	Axis:= axis, 
	Enable:= TRUE, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	Position=> position);
	
mcReadVelocity(
	Axis:= axis, 
	Enable:= TRUE, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	ActualVelocity=> velocity);
	
mcReadError(
	Axis:= axis, 
	Enable:= TRUE, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	AxisErrorID=> );

mcReset(
	Axis:= axis, 
	Execute:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );

mcPower(
	Axis:= axis, 
	Enable:= bEnable, 
	Enable_Positive:= TRUE, 
	Enable_Negative:= TRUE, 
	Override:= 100, 
	BufferMode:= , 
	Options:= , 
	Status=> , 
	Busy=> , 
	Active=> , 
	Error=> , 
	ErrorID=> );

mcMoveAbsolute(
	Axis:= axis, 
	Execute:= , 
	Position:= , 
	Velocity:= targetingVelocity, 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
mcMoveRelative(
	Axis:= axis, 
	Execute:= , 
	Distance:= ,
	Velocity:= targetingVelocity, 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
mcMoveVelocity( //stopped with stop();
	Axis:= axis, 
	Execute:= , 
	Velocity:= continuousVelocity, 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	Direction:= , 
	BufferMode:= , 
	Options:= , 
	InVelocity=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
mcSetPosition(
	Axis:= axis, 
	Execute:= , 
	Position:= , 
	Mode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );
	
mcStop(
	Axis:= axis, 
	Execute:= , 
	Deceleration:= , 
	Jerk:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );]]></ST>
      </Implementation>
    </Method>
    <Property Name="CurrentPosition" Id="{0934a101-94a1-4fb2-bdb4-30be5e982d33}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CurrentPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{b23f6c68-2daf-4376-a6c1-03e85e40e495}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurrentPosition := position;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{bc1f8997-75bf-475c-b65e-0d9dcbf4fda9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[position := CurrentPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Error" Id="{f7ffd812-9c6b-4e40-90d8-7b56e23c1c31}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Error : BOOL]]></Declaration>
      <Get Name="Get" Id="{cbbac95b-2140-4079-8c63-c725e6559d51}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[error := 
	mcMoveAbsolute.Error OR 
	mcMoveRelative.Error OR 
	mcMoveVelocity.Error OR 
	mcSetPosition.Error OR 
	mcReset.Error OR 
	mcStop.Error OR
	mcReadError.AxisErrorID > 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="homingSequence" Id="{0aff97ab-0ed4-496a-b780-e2bf43b14274}">
      <Declaration><![CDATA[METHOD homingSequence : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE step OF
	Homing.IDLE:
		reset();
		IF bEnable THEN
			step := Homing.START;
		END_IF
		
	Homing.START:
		IF AtHome THEN
			mcMoveVelocity.Execute := FALSE;
			step := Homing.STOP;
			
		ELSIF AtInnerLimit THEN
			mcMoveVelocity.Execute := FALSE;
			step := Homing.RETRY;
			
		ELSE
			mcMoveVelocity.Direction := MC_Negative_Direction;
			mcMoveVelocity.Execute := NOT mcMoveVelocity.Execute;
		END_IF
		
	Homing.RETRY:
		IF AtOuterLimit THEN
			mcMoveVelocity.Execute := FALSE;
			step := Homing.START;
		ELSE
			mcMoveVelocity.Direction := MC_Positive_Direction;
			mcMoveVelocity.Execute := NOT mcMoveVelocity.Execute;
		END_IF
		
	Homing.STOP:
		IF velocity = 0 THEN
			mcStop.Execute := FALSE;
			step := Homing.SET;
		ELSE
			mcStop.Execute := TRUE;
		END_IF
		
	Homing.SET:
		IF position = 0 THEN
			mcSetPosition.Execute := FALSE;
			homingSequence := TRUE;
			step := Homing.DONE;
		ELSE
			mcSetPosition.Position := 0;
			mcSetPosition.Execute := TRUE;
		END_IF
		
	Homing.DONE:
		homingComplete := TRUE;
		step := Homing.IDLE;
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveAbsolute" Id="{21b803a0-e993-4b53-8e67-4dc1441dcaac}">
      <Declaration><![CDATA[METHOD moveAbsolute : BOOL
VAR_INPUT
	newTarget : LREAL;
END_VAR
(*
VAR_OUTPUT
	fault : BOOL;
END_VAR
*)]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Active AND NOT error THEN
	mcMoveAbsolute.Position := newTarget;
	mcMoveAbsolute.Execute := TRUE;
END_IF

moveAbsolute := (*mcMoveAbsolute.Done AND mcMoveAbsolute.Active;*)
	position = newTarget;]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveContinuous" Id="{187fcae1-d69d-45e6-9b32-45503262b388}">
      <Declaration><![CDATA[METHOD moveContinuous : BOOL
VAR_INPUT
	//direction : BOOL; //direction (F = inwards, T = outwards)
	direction : MC_Direction;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
IF mcMoveVelocity.Active THEN
	stop();
END_IF

IF NOT mcStop.Done THEN
	RETURN;
END_IF
*)
(*
IF direction THEN
	mcMoveVelocity.Direction := MC_Positive_Direction;
ELSE
	mcMoveVelocity.Direction := MC_Negative_Direction;
END_IF
*)
mcMoveVelocity.Direction := direction;

IF NOT mcMoveVelocity.Error THEN
	mcMoveVelocity.Execute := TRUE;
	moveContinuous := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveRelative" Id="{5007327a-d0c8-4019-b254-3899ddc022d4}">
      <Declaration><![CDATA[METHOD moveRelative : BOOL
VAR_INPUT
	distance : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcMoveRelative.Distance := distance;

moveRelative := mcMoveRelative.Done;]]></ST>
      </Implementation>
    </Method>
    <Method Name="override" Id="{ac942401-c0df-43ce-b112-6fd76fee4540}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE override : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
-at home and attempting to traverse outward
-at outer limit and attempting to traverse outward
-at inner limit and attempting to traverse inwards
*)
(*
inward = negative direction, negative velocity
outward = positive direction, positive velocity
*)

IF error THEN
	stop();
	reset();
	
ELSIF
	//AtHome AND (TargetPosition > CurrentPosition OR velocity > 0) OR //condition removed, servo can traverse on either side of home
	AtInnerLimit AND (TargetPosition > CurrentPosition OR velocity > 0) OR
	AtOuterLimit AND (TargetPosition < CurrentPosition OR velocity < 0)
THEN
	stop();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="reset" Id="{a36108c0-1a86-414c-a0c7-8c33d2ae7c0a}">
      <Declaration><![CDATA[METHOD reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcReset.Execute := TRUE;

reset := mcReset.Done;]]></ST>
      </Implementation>
    </Method>
    <Method Name="stop" Id="{6f8fe0e9-44fe-4039-8d2f-c0e38421a78d}">
      <Declaration><![CDATA[METHOD stop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mcStop.Execute := TRUE;

mcMoveAbsolute.Execute := FALSE;
mcMoveRelative.Execute := FALSE;
mcMoveVelocity.Execute := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="TargetPosition" Id="{34533e43-c39e-4084-955b-d9967678ffb1}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TargetPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{d11ca7f7-d236-477b-b019-4090a5b2e63e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a74bf45b-c9a9-43e4-87bf-3b3bf34b082f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[moveAbsolute(newTarget := TargetPosition);]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="toHome" Id="{0c090a28-7833-4ee0-8176-f036aecc3a59}">
      <Declaration><![CDATA[METHOD toHome : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[moveAbsolute(newTarget := 0);

toHome := AtHome;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="CenteredServoNC">
      <LineId Id="556" Count="0" />
      <LineId Id="559" Count="0" />
      <LineId Id="561" Count="1" />
      <LineId Id="558" Count="0" />
      <LineId Id="557" Count="0" />
      <LineId Id="493" Count="12" />
      <LineId Id="165" Count="0" />
    </LineIds>
    <LineIds Name="CenteredServoNC.Active.Get">
      <LineId Id="14" Count="6" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="CenteredServoNC.blocks">
      <LineId Id="86" Count="7" />
      <LineId Id="137" Count="0" />
      <LineId Id="139" Count="6" />
      <LineId Id="138" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="148" Count="6" />
      <LineId Id="147" Count="0" />
      <LineId Id="94" Count="6" />
      <LineId Id="21" Count="1" />
      <LineId Id="101" Count="11" />
      <LineId Id="35" Count="50" />
      <LineId Id="5" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="115" Count="8" />
      <LineId Id="114" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="126" Count="10" />
      <LineId Id="125" Count="0" />
    </LineIds>
    <LineIds Name="CenteredServoNC.CurrentPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CenteredServoNC.CurrentPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CenteredServoNC.Error.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="5" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="CenteredServoNC.homingSequence">
      <LineId Id="439" Count="51" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="CenteredServoNC.moveAbsolute">
      <LineId Id="72" Count="5" />
      <LineId Id="51" Count="0" />
    </LineIds>
    <LineIds Name="CenteredServoNC.moveContinuous">
      <LineId Id="37" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="3" />
      <LineId Id="23" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="CenteredServoNC.moveRelative">
      <LineId Id="8" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CenteredServoNC.override">
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="71" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="65" Count="3" />
      <LineId Id="70" Count="0" />
      <LineId Id="69" Count="0" />
    </LineIds>
    <LineIds Name="CenteredServoNC.reset">
      <LineId Id="5" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="CenteredServoNC.stop">
      <LineId Id="9" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="CenteredServoNC.TargetPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CenteredServoNC.TargetPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CenteredServoNC.toHome">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>