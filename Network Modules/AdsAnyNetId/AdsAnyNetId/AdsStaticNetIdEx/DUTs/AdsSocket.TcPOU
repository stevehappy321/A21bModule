<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="AdsSocket" Id="{4b08c35a-5e88-4e7b-a45b-894d0e3f10ba}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK AdsSocket
VAR_INPUT
	bEnable : BOOL;
END_VAR
VAR_OUTPUT
	PrgName : STRING; //descriptive string for the name of the running program, may or may not be used
	AmsNetId : T_AmsNetId;
	AmsPort : T_AmsPort; //for now, use ADS port 851 for communication
END_VAR
VAR_OUTPUT	
	receivingData : AdsData;
	sendingData : AdsData;
	
	readBusy : BOOL;
	readError : BOOL;
	readErrorId : UDINT;
	
	writeBusy : BOOL;
	writeError : BOOL;
	writeErrorId : UDINT;
	
	timeout : BOOL;
	busy : BOOL;
	error : BOOL;
	lastConnectedTime : TIMESTRUCT;
END_VAR
VAR	
	targetSocket : STRING := CONCAT('Sockets.', localPrgName); //write into the recipient's allocated socket for this system
	adsWriteSymbol : FB_WriteAdsSymByName;
	adsReadSymbol : FB_ReadAdsSymByName;
END_VAR
VAR	
	remoteFlag : BOOL; //receive FROM remote system
	localFlag : BOOL; //send TO remote system
	
	timer : TON;
	timerTrig : R_TRIG;
	
	flagWriter : FB_WriteAdsSymByName;
	nameWriter, netIdWriter, portWriter : FB_WriteAdsSymByName := (bWrite := FALSE);
	writeSync : BOOL := FALSE;
END_VAR
VAR_STAT
	localPrgName : STRING := TO_STRING(AreaNum.AREA_4);
	localAmsNetId : T_AmsNetId := '192.168.101.188.1.1';
	localAmsPort : T_AmsPort := 851;
END_VAR
(*
TCP-style ADS connection that only writes to a buffer in the recipient's AdsTcpUnit module
*)]]></Declaration>
    <Implementation>
      <ST><![CDATA[targetSocket := CONCAT('Sockets.', localPrgName);
(*
IF NOT bEnable THEN
	RETURN;
END_IF
*)
setup();

flagSequence();

IF timeout THEN
	//stop data read/write attempts
	adsWriteSymbol.bWrite := FALSE;
	adsReadSymbol.bRead := FALSE;
ELSE
	//only writes if data has contents, otherwise remains false
	adsWriteSymbol.bWrite := NOT BufferIsEmpty(sendingData.binaryData) AND NOT adsWriteSymbol.bWrite;
END_IF

blocks();

]]></ST>
    </Implementation>
    <Method Name="blocks" Id="{aafa1f89-5424-428c-92a9-eff1fd826f0b}">
      <Declaration><![CDATA[METHOD PRIVATE blocks : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[adsReadSymbol(
	bRead:= , 
	sNetId:= AmsNetId, 
	nPort:= AmsPort, 
	sVarName:= , 
	nDestAddr:= , 
	nLen:= , 
	tTimeout:= , 
	eComMode:= , 
	bClearOnError:= , 
	bBusy=> readBusy, 
	bError=> readError, 
	nErrorId=> readErrorId);
	
adsWriteSymbol(
	bWrite:= , 
	sNetId:= AmsNetId, 
	nPort:= AmsPort, 
	sVarName:= CONCAT(targetSocket, '.receivingData'), 
	nSrcAddr:= ADR(sendingData), 
	nLen:= SIZEOF(sendingData), 
	tTimeout:= , 
	eComMode:= eAdsComModeSecureCom, 
	bBusy=> writeBusy, 
	bError=> writeError, 
	nErrorId=> writeErrorId);
	
IF NOT adsWriteSymbol.bBusy THEN
	MEMSET(ADR(sendingData), 0, SIZEOF(sendingData));
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="flagSequence" Id="{282d8f86-2a36-4b14-910d-5c0d51c4379e}">
      <Declaration><![CDATA[METHOD PRIVATE flagSequence : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[writeSync := NOT writeSync;

flagWriter(
	bWrite:= writeSync, 
	sNetId:= AmsNetId, 
	nPort:= AmsPort, 
	sVarName:= CONCAT(targetSocket, '.remoteFlag'), 
	nSrcAddr:= ADR(localFlag), 
	nLen:= SIZEOF(localFlag), 
	tTimeout:= , 
	eComMode:= , 
	bBusy=> busy, 
	bError=> error, 
	nErrorId=> );
	
timerTrig(
	CLK:= timerTrig.CLK XOR remoteFlag,
	Q=> ); //reset timer
	
IF timerTrig.Q THEN
	lastConnectedTime := MAIN.currentTime;
END_IF

timer(IN:= NOT timerTrig.Q, PT:= DEFAULT_ADS_TIMEOUT, Q=> timeout, ET=> );

IF NOT flagWriter.bBusy THEN
	localFlag := NOT localFlag;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="send" Id="{17359b84-8e84-4f55-9ea9-7b9b4062b4aa}">
      <Declaration><![CDATA[METHOD send : BOOL
VAR_INPUT
	data : REFERENCE TO AdsData;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sendingData := data;]]></ST>
      </Implementation>
    </Method>
    <Method Name="setup" Id="{924e3658-3899-4767-999f-eb1a77052422}">
      <Declaration><![CDATA[METHOD PRIVATE setup : BOOL
VAR_INST
	name : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nameWriter(
	bWrite:= writeSync, 
	sNetId:= AmsNetId, 
	nPort:= AmsPort, 
	sVarName:= CONCAT(targetSocket, '.PrgName'), 
	nSrcAddr:= ADR(localPrgName), 
	nLen:= SIZEOF(localPrgName), 
	tTimeout:= , 
	eComMode:= , 
	bBusy=> busy, 
	bError=> error, 
	nErrorId=> );
	
netIdWriter(
	bWrite:= writeSync, 
	sNetId:= AmsNetId, 
	nPort:= AmsPort, 
	sVarName:= CONCAT(targetSocket, '.AmsNetId'), 
	nSrcAddr:= ADR(localAmsNetId), 
	nLen:= SIZEOF(localAmsNetId), 
	tTimeout:= , 
	eComMode:= , 
	bBusy=> , 
	bError=> , 
	nErrorId=> );
	
portWriter(
	bWrite:= writeSync, 
	sNetId:= AmsNetId, 
	nPort:= AmsPort, 
	sVarName:= CONCAT(targetSocket, '.AmsPort'), 
	nSrcAddr:= ADR(localAmsPort), 
	nLen:= SIZEOF(localAmsPort), 
	tTimeout:= , 
	eComMode:= , 
	bBusy=> , 
	bError=> , 
	nErrorId=> );]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="AdsSocket">
      <LineId Id="1159" Count="0" />
      <LineId Id="1175" Count="0" />
      <LineId Id="1172" Count="2" />
      <LineId Id="1160" Count="0" />
      <LineId Id="1018" Count="0" />
      <LineId Id="1126" Count="0" />
      <LineId Id="1171" Count="0" />
      <LineId Id="1036" Count="7" />
      <LineId Id="1035" Count="0" />
      <LineId Id="1033" Count="0" />
      <LineId Id="1085" Count="1" />
      <LineId Id="986" Count="0" />
    </LineIds>
    <LineIds Name="AdsSocket.blocks">
      <LineId Id="20" Count="12" />
      <LineId Id="60" Count="0" />
      <LineId Id="34" Count="10" />
      <LineId Id="19" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="65" Count="1" />
      <LineId Id="64" Count="0" />
    </LineIds>
    <LineIds Name="AdsSocket.flagSequence">
      <LineId Id="64" Count="1" />
      <LineId Id="39" Count="24" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="AdsSocket.send">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="AdsSocket.setup">
      <LineId Id="69" Count="2" />
      <LineId Id="106" Count="0" />
      <LineId Id="73" Count="11" />
      <LineId Id="107" Count="0" />
      <LineId Id="111" Count="1" />
      <LineId Id="88" Count="9" />
      <LineId Id="110" Count="0" />
      <LineId Id="99" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="102" Count="3" />
      <LineId Id="44" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>