<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="AdsTcpUnit" Id="{13cf0c93-7a2b-4eb5-b870-3b8395f254f8}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM AdsTcpUnit
VAR_OUTPUT
	bBusy : BOOL;
	err : BOOL;
	errid : UDINT;
END_VAR
VAR_OUTPUT
	areaSockets : ARRAY[1..6] OF POINTER TO AdsSocket; //only used for finding a socket by name, POINTER because array of REFERENCE does not exist
	
	//unlikely that each area will need communication with all other areas
	//only area 3 needs access to all areas, other areas only need access to area 3
	//AREA_1 : AdsSocket := (PrgName := 'AREA_1', AmsNetId := '1.0.131.216.1.1', AmsPort := 851);
	AREA_2 : AdsSocket := (PrgName := 'AREA_2', AmsNetId := ''(*'2.0.131.216.1.1'*), AmsPort := 851);
	//AREA_3 : AdsSocket := (PrgName := 'AREA_3', AmsNetId := '3.0.131.216.1.1', AmsPort := 851);
	//AREA_4 : AdsSocket := (PrgName := 'AREA_4', AmsNetId := '4.0.131.216.1.1', AmsPort := 851);
	//AREA_5 : AdsSocket := (PrgName := 'AREA_5', AmsNetId := '5.0.131.216.1.1', AmsPort := 851);
	//AREA_6 : AdsSocket := (PrgName := 'AREA_6', AmsNetId := '6.0.131.216.1.1', AmsPort := 851);
END_VAR
VAR	
	socket : REFERENCE TO AdsSocket;
	(*
	transmissons are queued into AdsTcpUnit, where all the preset sockets are
	to send a transmission, place the data and a recipient name into an AdsMessage type
	when a transmission is polled from the queue:
		if the recipient does not exist, the message contents are discarded
		if the recipient exists and is not busy writing, then the message contents are given to the socket to be written
		if the recipient is busy, then the messsage is pushed back into the queue
	*)
	
	i : INT(1..numSockets);
END_VAR
VAR CONSTANT
	numSockets : INT := 6-1;
END_VAR
(*
due to the inflexible stack size of Windows CE controllers,
this version of AdsTcp communication does not dynamically generate ADS messages into a queue to be polled cyclically
instead, modules must wait for the requested socket to finish sending its previous data before sending the next
*)]]></Declaration>
    <Implementation>
      <ST><![CDATA[//areaSockets[1] := ADR(AREA_1);
areaSockets[2] := ADR(AREA_2);
//areaSockets[3] := ADR(AREA_3);
//areaSockets[4] := ADR(AREA_4);
//areaSockets[5] := ADR(AREA_5);
//areaSockets[6] := ADR(AREA_6);

blocks();]]></ST>
    </Implementation>
    <Method Name="blocks" Id="{9ebaac93-7e8c-40aa-9ae0-c7db2329b8cc}">
      <Declaration><![CDATA[METHOD PRIVATE blocks : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
AREA_1(
	PrgName=> , 
	AmsNetId=> , 
	AmsPort=> , 
	receivingData=> , 
	sendingData=> , 
	readBusy=> , 
	readError=> , 
	readErrorId=> , 
	writeBusy=> , 
	writeError=> , 
	writeErrorId=> );
*)
AREA_2(
	PrgName=> , 
	AmsNetId=> , 
	AmsPort=> , 
	receivingData=> , 
	sendingData=> , 
	readBusy=> , 
	readError=> , 
	readErrorId=> , 
	writeBusy=> , 
	writeError=> , 
	writeErrorId=> );
(*
AREA_3(
	PrgName=> , 
	AmsNetId=> , 
	AmsPort=> , 
	receivingData=> , 
	sendingData=> , 
	readBusy=> , 
	readError=> , 
	readErrorId=> , 
	writeBusy=> , 
	writeError=> , 
	writeErrorId=> );
	
AREA_4(
	PrgName=> , 
	AmsNetId=> , 
	AmsPort=> , 
	receivingData=> , 
	sendingData=> , 
	readBusy=> , 
	readError=> , 
	readErrorId=> , 
	writeBusy=> , 
	writeError=> , 
	writeErrorId=> );
	
AREA_5(
	PrgName=> , 
	AmsNetId=> , 
	AmsPort=> , 
	receivingData=> , 
	sendingData=> , 
	readBusy=> , 
	readError=> , 
	readErrorId=> , 
	writeBusy=> , 
	writeError=> , 
	writeErrorId=> );
	
AREA_6(
	PrgName=> , 
	AmsNetId=> , 
	AmsPort=> , 
	receivingData=> , 
	sendingData=> , 
	readBusy=> , 
	readError=> , 
	readErrorId=> , 
	writeBusy=> , 
	writeError=> , 
	writeErrorId=> );
*)
]]></ST>
      </Implementation>
    </Method>
    <Method Name="findSocket" Id="{c37efba5-e53c-4b20-b5c5-53537400d2c3}">
      <Declaration><![CDATA[METHOD PRIVATE findSocket : REFERENCE TO AdsSocket
VAR_INPUT
	recipient : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO numSockets BY 1 DO
	IF areaSockets[i] <> 0 AND_THEN areaSockets[i]^.PrgName = recipient THEN //socket is valid, and socket name matches recipient
		findSocket REF= areaSockets[i]^;
		RETURN;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="pollData" Id="{8946f3d5-cf29-4c37-a08b-5c0639184b2a}">
      <Declaration><![CDATA[METHOD pollData : BOOL
VAR_INPUT
	//remotePrgName : STRING;
	buffer : PVOID;
	bufferSize : UDINT;
	
	data : PVOID;
	dataSize : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[MEMCPY(buffer, data, MIN(dataSize, bufferSize));
MEMSET(data, 0, dataSize);]]></ST>
      </Implementation>
    </Method>
    <Method Name="retrieveData" Id="{a43146da-c5e7-4808-b5b5-f6b524a0e086}">
      <Declaration><![CDATA[METHOD retrieveData : BOOL
VAR_INPUT
	name : STRING;
END_VAR
VAR_IN_OUT
	genericBuffer : ARRAY[*] OF BYTE;
END_VAR
VAR
	bufferSize : DINT;
	
	//reqHandle : REFERENCE TO AdsHandle;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
bufferSize := UPPER_BOUND(genericBuffer, 1) - LOWER_BOUND(genericBuffer, 1) + 1;

reqHandle REF= findHandle('CLIENT_1');

IF __ISVALIDREF(reqHandle) THEN
	genericBuffer := ADR(reqHandle.genericBuffer);
	stDemo := reqHandle.receiverStDemo;
END_IF
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="sendMessage" Id="{b6eb2d2a-cefe-4778-a48c-87e2bc9a1963}">
      <Declaration><![CDATA[METHOD sendMessage : BOOL
VAR_INPUT
	recipient : STRING;
	data : REFERENCE TO AdsData;
END_VAR
VAR
	//socket : REFERENCE TO AdsSocket;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[socket REF= findSocket(recipient := recipient);

IF __ISVALIDREF(socket) AND_THEN NOT socket.writeBusy THEN
	socket.send(data := data);
	sendMessage := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="AdsTcpUnit">
      <LineId Id="3884" Count="0" />
      <LineId Id="3887" Count="0" />
      <LineId Id="3885" Count="0" />
      <LineId Id="3888" Count="2" />
      <LineId Id="3892" Count="0" />
      <LineId Id="3891" Count="0" />
    </LineIds>
    <LineIds Name="AdsTcpUnit.blocks">
      <LineId Id="129" Count="0" />
      <LineId Id="55" Count="10" />
      <LineId Id="34" Count="0" />
      <LineId Id="66" Count="11" />
      <LineId Id="35" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="78" Count="10" />
      <LineId Id="36" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="90" Count="10" />
      <LineId Id="37" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="101" Count="10" />
      <LineId Id="38" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="112" Count="10" />
      <LineId Id="33" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="42" Count="0" />
    </LineIds>
    <LineIds Name="AdsTcpUnit.findSocket">
      <LineId Id="5" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="AdsTcpUnit.pollData">
      <LineId Id="21" Count="0" />
      <LineId Id="51" Count="0" />
    </LineIds>
    <LineIds Name="AdsTcpUnit.retrieveData">
      <LineId Id="35" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="36" Count="0" />
    </LineIds>
    <LineIds Name="AdsTcpUnit.sendMessage">
      <LineId Id="22" Count="3" />
      <LineId Id="33" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>