<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="ClearLinkEIP" Id="{82d395c8-897a-4c3b-989f-b99dc8146760}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ClearLinkEIP
VAR_INPUT
	bEnable : BOOL;
END_VAR
VAR_OUTPUT
	pulse AT %Q* : INT; //num pulses
	outputRegister AT %Q* : INT;
	brakeRelease AT %Q* : BOOL;
	
	A : BOOL; //direction (F = inwards, T = outwards)
	B : BOOL; //home bit
	clear : BOOL;
	
	contact AT %I* : BOOL;
	home AT %I* : BOOL;
	outerLimit AT %I* : BOOL;
	innerLimit AT %I* : BOOL;
	
	hlfb AT %I* : REAL; //high level feedback, if -9999 then servo is idle
	
	homeSet : BOOL;
	busy : BOOL;
	error : BOOL;
	
	position : LREAL;
	targetPos : LREAL;
END_VAR
VAR
	pulseRequest : INT;
	pulser : TON;
	
	minHoming : TON;
	resetTimer : TP;
	
	step : Homing;
	mode : (DISABLE, HOLD, TARGET, CONTINUOUS, RESET_ERR);
END_VAR
VAR_STAT CONSTANT
	resetTime : TIME := T#1000MS;
	pulseWidth : TIME := T#40MS;
	pulseSeparation : TIME := T#40MS;
	unitsPerPulse : INT := 800; //800 Teknic units per revolution
	distancePerPulse : INT := 5; //5mm per revolution
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//M-connector output register
outputRegister.0 := bEnable; 	//enable
outputRegister.1 := A; 			//direction bit
outputRegister.2 := B; 			//homing bit - set to TRUE on startup to begin homing, then set to FALSE to finish homing
outputRegister.3 := clear; 		//reset bit

resetTimer(IN:= , PT:= resetTime, Q=> clear, ET=> ); //reset timer

IF NOT bEnable THEN
	homeSet := FALSE;
	mode := HOLD;
END_IF

//set the bool outputs, all are listed for readability
homeSet := homeSet;
busy := hlfb <> -9999;
error := error;

override(); //if sensor limits are reached, this method blocks motion that would exceed the limits

CASE mode OF		
	HOLD: //hold current position, no motion
		pulse := 0;
		pulseRequest := 0;
	
	TARGET:	//target a given position
		IF WithinTolerance(position, targetPos, distancePerPulse) THEN
			pulseRequest := 0;
			mode := HOLD;
			
		ELSIF NOT busy THEN
			A :=  position < targetPos;
			(*
			2 options to traverse to a target position:
				a)  send all pulses at once - single continuous motion but may exceed limits
				b)  1 pulse at a time - choppy but safer
			*)
			pulseRequest := TO_INT(ABS(position - targetPos)/distancePerPulse);
			//pulseRequest := 1;
			
		END_IF
		
	CONTINUOUS: //single pulses in the direction specified by moveContinuous()
		pulseRequest := 1;
		
	RESET_ERR: //reset pulse
		pulse := 0;
		pulseRequest := 0;
		resetTimer.IN := TRUE;
		
		IF resetTimer.Q THEN
			resetTimer.IN := FALSE;
			mode := HOLD;
		END_IF
		
END_CASE

sequence();]]></ST>
    </Implementation>
    <Folder Name="Public Methods" Id="{d6277c90-9357-4cab-83a4-328971066230}" />
    <Method Name="homingSequence" Id="{ed7f9015-f217-4688-b191-db86d43e2b15}" FolderPath="Public Methods\">
      <Declaration><![CDATA[METHOD homingSequence : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[minHoming(IN:= , PT:= T#1S, Q=> , ET=> ); //IN and OUT should be held for at least 1 second - may be removed for deployment

IF NOT bEnable THEN //homing does not begin until software enable
	RETURN;
END_IF

CASE step OF
	Homing.IDLE:
		bEnable := FALSE;
		A := FALSE;
		B := FALSE;
		brakeRelease := TRUE;
		
		homeSet := FALSE;
		step := Homing.IN;
		
	Homing.IN: //let insertion drop to inner limit before homing
		bEnable := FALSE;
		A := FALSE;
		B := FALSE;
		brakeRelease := TRUE;
		
		minHoming.IN := TRUE;
		
		IF NOT innerLimit AND minHoming.Q THEN
			step := Homing.OUT;
		END_IF
	
	Homing.OUT:
		bEnable := TRUE;
		A := FALSE;
		B := TRUE;
		brakeRelease := TRUE;
		
		minHoming.IN := TRUE;
		
		IF NOT home AND minHoming.Q THEN
			minHoming.IN := FALSE;
			step := Homing.DONE;
		END_IF
		
	Homing.DONE:
		bEnable := TRUE;
		A := FALSE;
		B := FALSE;
		brakeRelease := TRUE;
		
		pulseRequest := 0;
		
		position := 0;
		homeSet := TRUE;
		homingSequence := TRUE;
		
		mode := HOLD;
		step := Homing.IDLE;
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveAbsolute" Id="{dc77def1-bef9-43df-afd0-8ca352bd4ae2}" FolderPath="Public Methods\">
      <Declaration><![CDATA[METHOD moveAbsolute : BOOL
VAR_INPUT
	newTarget : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[targetPos := newTarget;
mode := TARGET;]]></ST>
      </Implementation>
    </Method>
    <Method Name="moveContinuous" Id="{56e37924-ed1f-434c-b8b5-86f83bcd5e14}" FolderPath="Public Methods\">
      <Declaration><![CDATA[METHOD moveContinuous : BOOL
VAR_INPUT
	direction : MC_Direction;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF direction = MC_Negative_Direction THEN
	A := FALSE;
ELSIF direction = MC_Positive_Direction THEN
	A := TRUE;
END_IF

mode := CONTINUOUS;]]></ST>
      </Implementation>
    </Method>
    <Method Name="override" Id="{12f80332-3269-42b5-a267-e03e0f51e546}">
      <Declaration><![CDATA[METHOD PRIVATE override : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
IF (*NOT*) home THEN //block outwards motion
	position := 0;
	IF A THEN
		mode := HOLD;
	END_IF
	
ELSIF (*NOT*) outerLimit AND_THEN A THEN //block outwards motion
	mode := HOLD;

ELSIF (*NOT*) innerLimit AND_THEN NOT A THEN //block inwards motion
	mode := HOLD;
	
END_IF
*)


IF
	((*NOT*) home AND_THEN A) OR
	((*NOT*) outerLimit AND_THEN A) OR
	((*NOT*) innerLimit AND_THEN NOT A)
THEN
	mode := HOLD;
END_IF


IF (*NOT*) home THEN //block outwards motion
	position := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="reset" Id="{b78ab13d-678d-4b52-8830-ac5e90a85d68}" FolderPath="Public Methods\">
      <Declaration><![CDATA[METHOD reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mode := RESET_ERR;]]></ST>
      </Implementation>
    </Method>
    <Method Name="sequence" Id="{d3e76146-deb6-4a1c-bf00-057dae828590}">
      <Declaration><![CDATA[METHOD PRIVATE sequence : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF hlfb > -9999 THEN //servo is active
	IF A THEN //positive direction
		position := position + (distancePerPulse * pulse);
	ELSE //negative direction
		position := position - (distancePerPulse * pulse);
	END_IF
	pulse := 0; //pulses already received, can be set to 0 so position change is not compounded

ELSIF pulse = 0 THEN //servo is not active
	pulse := pulseRequest;
	pulseRequest := 0; //remove this if not working as intended
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="stop" Id="{b371037c-73c2-41cf-af60-cf703d5e079a}" FolderPath="Public Methods\">
      <Declaration><![CDATA[METHOD stop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mode := HOLD;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="ClearLinkEIP">
      <LineId Id="2278" Count="3" />
      <LineId Id="2276" Count="1" />
      <LineId Id="2274" Count="0" />
      <LineId Id="2269" Count="0" />
      <LineId Id="2025" Count="0" />
      <LineId Id="2085" Count="0" />
      <LineId Id="2028" Count="1" />
      <LineId Id="1969" Count="0" />
      <LineId Id="1808" Count="1" />
      <LineId Id="1811" Count="1" />
      <LineId Id="2197" Count="0" />
      <LineId Id="2196" Count="0" />
      <LineId Id="1813" Count="3" />
      <LineId Id="2033" Count="0" />
      <LineId Id="1817" Count="2" />
      <LineId Id="2035" Count="0" />
      <LineId Id="1826" Count="2" />
      <LineId Id="1920" Count="0" />
      <LineId Id="2261" Count="0" />
      <LineId Id="2263" Count="2" />
      <LineId Id="2262" Count="0" />
      <LineId Id="1972" Count="0" />
      <LineId Id="1829" Count="0" />
      <LineId Id="1831" Count="4" />
      <LineId Id="1855" Count="0" />
      <LineId Id="1857" Count="0" />
      <LineId Id="1865" Count="0" />
      <LineId Id="2034" Count="0" />
      <LineId Id="1859" Count="4" />
      <LineId Id="1856" Count="0" />
      <LineId Id="1836" Count="3" />
    </LineIds>
    <LineIds Name="ClearLinkEIP.homingSequence">
      <LineId Id="227" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="257" Count="1" />
      <LineId Id="247" Count="0" />
      <LineId Id="176" Count="1" />
      <LineId Id="248" Count="0" />
      <LineId Id="179" Count="7" />
      <LineId Id="249" Count="0" />
      <LineId Id="188" Count="2" />
      <LineId Id="253" Count="1" />
      <LineId Id="191" Count="1" />
      <LineId Id="194" Count="3" />
      <LineId Id="245" Count="0" />
      <LineId Id="199" Count="2" />
      <LineId Id="229" Count="1" />
      <LineId Id="202" Count="1" />
      <LineId Id="231" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="206" Count="2" />
      <LineId Id="250" Count="0" />
      <LineId Id="210" Count="2" />
      <LineId Id="251" Count="1" />
      <LineId Id="213" Count="3" />
      <LineId Id="225" Count="1" />
      <LineId Id="217" Count="1" />
      <LineId Id="133" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkEIP.moveAbsolute">
      <LineId Id="16" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkEIP.moveContinuous">
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="4" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkEIP.override">
      <LineId Id="31" Count="0" />
      <LineId Id="6" Count="11" />
      <LineId Id="5" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="27" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="30" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkEIP.reset">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkEIP.sequence">
      <LineId Id="110" Count="6" />
      <LineId Id="136" Count="0" />
      <LineId Id="121" Count="1" />
      <LineId Id="132" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="48" Count="0" />
    </LineIds>
    <LineIds Name="ClearLinkEIP.stop">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>