<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="WoodBunkEx_old" Id="{2088e8c4-0288-48d0-bf5f-a9e21e220f9a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK WoodBunkEx_old
VAR_IN_OUT //controls
	execute : BOOL;
	stop : BOOL;
	
	manualStep : BOOL;
	manualSuction : BOOL;
END_VAR
VAR_IN_OUT //references to required hardware
	robotLeft, robotRight : RobotA21;
	toolStorageLeft, toolStorageRight : A21ToolStorage;
	
	stagingTableLeft, stagingTableRight : StagingTable;
	magazineLeft, magazineRight : SkidMagazine;
	
	strapper : StrapMachine;
	
	horizontalDriveLeft, horizontalDriveRight : AirPiston;
	verticalDriveLeft, verticalDriveRight : ClearLinkMC;
	pistonBottom : SimplePiston;
	
	suctionTop : ARRAY[*] OF SuctionPad; (*1..3*)
	suctionLeft : ARRAY[*] OF SuctionPad; (*1..4*)
	suctionRight : ARRAY[*] OF SuctionPad; (*1..4*)
	suctionBottom : ARRAY[*] OF SuctionPad; (*1..2*)
END_VAR
VAR_OUTPUT
	//ready : BOOL;
	done : BOOL;
	error : BOOL;
END_VAR
VAR //for testing, to be removed when deployoed
	latchLeft, latchRight : BOOL; //prevents SMC sliders from overshooting the inner limit sensor
	
	suctionEnableTop : BOOL;
	suctionEnableLeft : BOOL;
	suctionEnableRight : BOOL;
	suctionEnableBottom : BOOL;
END_VAR
VAR //Allen-Bradley-style AOIs encapsulate functionality and reduce the number of module variables
	templateLeft, templateRight : AOI_StagingTemplate;
	stageLeft, stageRight : AOI_StageWoodBunk; 
	loadLeft, loadRight : AOI_LoadWoodBunk;
	
	topSuctionDelay : TON;
	
	step : (IDLE, STAGING, LOAD_WB, PUSH, STRAP, RELEASE, COMPLETE := 1050);
	iPair : INT;
	
	loadStep : INT;
	stageStep : INT;
	iSlotLeft, iSlotRight : INT;
END_VAR
VAR //local types
	demoHeight : REAL := 600; //mm
	materialsArr : ARRAY[0..GVL.maxPairs] OF PositionMaterials := [
		(
			position := 0,
			top := 'WDS20', left := 'WDS20', right := 'WDS20', bottom := 'WDB20'
		),
		(
			position := 69,
			top := 'WDS20', left := 'WDS20', right := 'WDS20', bottom := 'WDB20'
		)];
	
	//stagingTemplateLeft, stagingTemplateRight AT %M* : StagingTable;
	//templateSlotsLeft, templateSlotsRight : ARRAY[1..10] OF STRING;
	//templateOccupancyLeft, templateOccupancyRight : ARRAY[1..10] OF BOOL;
	//stagingArrayLeft, stagingArrayRight : ARRAY[0..(GVL.maxPairs+1)*2] OF STRING;
	
	insertionLeft, insertionRight : Insertion;
	
	loadedMaterials : ARRAY[Surface.TOP..Surface.BOTTOM] OF STRING;
END_VAR
VAR CONSTANT
	sectionID : SectionEnum := SectionEnum.WOOD_BUNK;
END_VAR
VAR
	a,b,c,d : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[callLocalModules(); //initialize local modules

blocks(); //call local function blocks

IF robotRight.Done THEN
	robotRight.clearCommand();
END_IF

IF stop THEN
	stopSequence(); //stop everything
	RETURN;
END_IF

IF NOT insertionLeft.screw.HomeSet OR NOT insertionRight.screw.HomeSet THEN
	homingSequence(); //homing all motion devices and robots
	RETURN;
END_IF

a S= suctionTop[1].occupied AND suctionTop[2].occupied AND suctionTop[3].occupied;
b S= suctionLeft[1].occupied AND suctionLeft[2].occupied AND suctionLeft[3].occupied AND suctionLeft[4].occupied;
c S= suctionRight[1].occupied AND suctionRight[2].occupied AND suctionRight[3].occupied AND suctionRight[4].occupied;
d S= suctionBottom[1].occupied AND suctionBottom[2].occupied;

CASE step OF
	IDLE:
		IF execute THEN
			execute := FALSE;
			suctionEnableTop := suctionEnableLeft := suctionEnableRight := suctionEnableBottom := FALSE;
			step := STAGING;
		END_IF
		
		SetSuctions(suctionTop, suctionEnableTop);
		SetSuctions(suctionLeft, suctionEnableLeft);
		SetSuctions(suctionRight, suctionEnableRight);
		SetSuctions(suctionBottom, suctionEnableBottom);
		
	STAGING:
		IF NOT done THEN
			done := stage(error => error);
		END_IF
		
		IF
			(manualStep AND_THEN execute) OR
			(NOT manualStep AND_THEN done)
		THEN
			execute := FALSE;
			done := FALSE;
			step := LOAD_WB;
		END_IF
	
	LOAD_WB:
		IF NOT done THEN
			done := load(pairIndex := iPair, error => error);
		END_IF
		
		IF manualSuction THEN
			SetSuctions(suctionTop, suctionEnableTop);
			SetSuctions(suctionLeft, suctionEnableLeft);
			SetSuctions(suctionRight, suctionEnableRight);
			SetSuctions(suctionBottom, suctionEnableBottom);
		END_IF
		
		IF
			(manualStep AND_THEN execute) OR
			(NOT manualStep AND_THEN done)
		THEN
			done := FALSE;
			suctionEnableTop := suctionEnableLeft := suctionEnableRight := suctionEnableBottom := FALSE;
			execute := FALSE;
			
			step := PUSH;
		END_IF
		
	PUSH:
		IF
			(manualStep AND_THEN execute) OR
			(latchLeft AND latchRight AND pistonBottom.extended)
		THEN
			latchLeft := latchRight := FALSE;
			execute := FALSE;
			step := STRAP;
			RETURN;
		END_IF
		
		IF NOT validateSuctionQuality(checkTop:= TRUE, checkLeft:= TRUE, checkRight:= FALSE, checkBottom:= FALSE) THEN
			error := TRUE;
			RETURN;
		END_IF
		(*
		IF 
			insertionLeft.sliderPos <> demoHeight/2 //OR 
			//insertionRight.sliderPos <> demoHeight/2 //OR 
			//NOT insertionBottom.contact
		THEN
			insertionLeft.slideAbsolute(demoHeight/2);
			//insertionRight.slideAbsolute(demoHeight/2);
			RETURN;
		END_IF
		*)
		
		IF insertionLeft.screw.AtInnerLimit THEN
			latchLeft := TRUE;
		ELSIF NOT latchLeft THEN
			insertionLeft.press();
		END_IF
		
		IF insertionRight.screw.AtInnerLimit THEN
			latchRight := TRUE;
		ELSIF NOT latchRight THEN
			insertionRight.press();
		END_IF
		pistonBottom.extend();
		
	STRAP:
		topSuctionDelay(IN:= , PT:= T#1S, Q=> , ET=> );
		
		strapper.bEnable := TRUE;
		IF strapper.done THEN
			topSuctionDelay.IN := FALSE;
			step := RELEASE;
			RETURN;
		END_IF
		
		IF topSuctionDelay.Q THEN
			SetSuctions(suctionTop, FALSE);
			SetSuctions(suctionLeft, FALSE);
			SetSuctions(suctionRight, FALSE);
			SetSuctions(suctionBottom, FALSE);
		ELSIF strapper.atBundleLevel THEN
			topSuctionDelay.IN := TRUE;
		END_IF
		
		IF strapper.ready THEN
			strapper.strap();
		END_IF
		
		IF execute THEN
			topSuctionDelay.IN := FALSE;
			execute := FALSE;
			step := RELEASE;
		END_IF
		
	RELEASE: //release command		
		//insertionLeft.slideAbsolute(0);
		//insertionRight.slideAbsolute(0);
		
		insertionLeft.release();
		insertionRight.release();
		pistonBottom.retract();
		
		IF 
			(insertionLeft.screw.AtHome AND insertionRight.screw.AtHome AND pistonBottom.retracted) OR
			execute
		THEN
			execute := FALSE;
			step := COMPLETE;
		END_IF
	
	COMPLETE:
		//reset everything
		iPair := (iPair + 1) MOD GVL.maxPairs;
		step := IDLE;
		
		a := b := c := d := FALSE;
END_CASE]]></ST>
    </Implementation>
    <Folder Name="Actions" Id="{8905af30-d273-495a-8298-bf5d1c948e98}" />
    <Folder Name="Template" Id="{09d5c311-4c3f-47ff-a4ee-978c10d79e0b}" />
    <Action Name="blocks" Id="{f0b9988a-1f41-42ab-9dfe-0901aeb64aa0}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[templateLeft(
	execute:= , 
	materialsArr:= materialsArr, 
	table:= stagingTableLeft, 
	includeTop:= TRUE, 
	includeLeft:= TRUE, 
	includeRight:= FALSE, 
	includeBottom:= FALSE);

templateLeft(
	execute:= , 
	materialsArr:= materialsArr, 
	table:= stagingTableRight, 
	includeTop:= FALSE, 
	includeLeft:= FALSE, 
	includeRight:= TRUE, 
	includeBottom:= TRUE);
	
stageLeft(
	sectionID:= sectionID, 
	execute:= ,
	robot:= robotLeft, 
	table:= stagingTableLeft, 
	magazine:= magazineLeft, 
	slot:= iSlotLeft, 
	material:= templateLeft.getSlot(iSlotLeft), //stagingTemplateLeft.getSlot(iSlotRight), 
	done=> , 
	error=> );

stageRight(
	sectionID:= sectionID, 
	execute:= ,
	robot:= robotRight, 
	table:= stagingTableRight, 
	magazine:= magazineRight, 
	slot:= iSlotRight, 
	material:= stagingTemplateRight.getSlot(iSlotRight), 
	done=> , 
	error=> );

loadLeft(
	sectionID:= sectionID, 
	execute:= ,
	robot:= robotLeft, 
	table:= stagingTableLeft, 
	suctions:= suctionTop,
	loadedMaterials:= loadedMaterials,
	recoveryAoiStage:= stageLeft, 
	recoveryMagazine:= magazineLeft, 
	surfaceID:= , 
	material:= , 
	loadedMaterials=> , 
	done=> , 
	error=> );
	
loadRight(
	sectionID:= sectionID, 
	execute:= ,
	robot:= robotRight, 
	table:= stagingTableRight, 
	suctions:= suctionTop,
	loadedMaterials:= loadedMaterials,
	recoveryAoiStage:= stageRight, 
	recoveryMagazine:= magazineRight, 
	surfaceID:= , 
	material:= , 
	loadedMaterials=> , 
	done=> , 
	error=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="callLocalModules" Id="{9f6de33f-3696-42ba-98fb-1d7f5838bb74}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
stagingTemplateLeft(slots := templateSlotsLeft, occupied := templateOccupancyLeft);
stagingTemplateRight(slots := templateSlotsRight, occupied := templateOccupancyRight);

insertionLeft(
	enable:= TRUE, 
	slider:= verticalDriveLeft, 
	screw:= horizontalDriveLeft, 
	contact=> , 
	softContact=> , 
	busy=> , 
	error=> , 
	home=> , 
	homingComplete=> , 
	sliderPos=> );
	
insertionRight(
	enable:= TRUE, 
	slider:= verticalDriveRight, 
	screw:= horizontalDriveRight,  
	contact=> , 
	softContact=> , 
	busy=> , 
	error=> , 
	home=> , 
	homingComplete=> , 
	sliderPos=> );]]></ST>
      </Implementation>
    </Action>
    <Method Name="createStagingArrayLeft" Id="{e7b2b38f-28b7-4ca1-97db-f5642f9138ea}" FolderPath="Template\">
      <Declaration><![CDATA[METHOD createStagingArrayLeft : BOOL
VAR
	remainingMaterial : STRING;
	splitMaterial : STRING;
	
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=0 TO (GVL.maxPairs+1)*2 BY 1 DO
	remainingMaterial := materialsArr[i].top;
	WHILE FIND(remainingMaterial, '_') > 0 DO
		splitCombinedMaterials(remainingMaterial, splitMaterial);
		IF splitMaterial <> '' THEN
			AddToStringArray(arr := stagingArrayLeft, newString := splitMaterial, numElements => , nextIndex => );
		END_IF
	END_WHILE
	
	IF remainingMaterial <> '' THEN
		AddToStringArray(arr := stagingArrayLeft, newString := remainingMaterial, numElements => , nextIndex => );
	END_IF
	
	
	remainingMaterial := materialsArr[i].left;
	WHILE FIND(remainingMaterial, '_') > 0 DO
		splitCombinedMaterials(remainingMaterial, splitMaterial);
		IF splitMaterial <> '' THEN
			AddToStringArray(arr := stagingArrayLeft, newString := splitMaterial, numElements => , nextIndex => );
		END_IF
	END_WHILE
	
	IF remainingMaterial <> '' THEN
		AddToStringArray(arr := stagingArrayLeft, newString := remainingMaterial, numElements => , nextIndex => );
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="createStagingArrayRight" Id="{a23fbf27-fc10-4125-87b3-bfb41c98b9d8}" FolderPath="Template\">
      <Declaration><![CDATA[METHOD createStagingArrayRight : BOOL
VAR
	remainingMaterial : STRING;
	splitMaterial : STRING;
	
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=0 TO (GVL.maxPairs+1)*2 BY 1 DO
	remainingMaterial := materialsArr[i].bottom;
	WHILE FIND(remainingMaterial, '_') > 0 DO
		splitCombinedMaterials(remainingMaterial, splitMaterial);
		IF splitMaterial <> '' THEN
			AddToStringArray(arr := stagingArrayRight, newString := splitMaterial, numElements => , nextIndex => );
		END_IF
	END_WHILE
	
	IF remainingMaterial <> '' THEN
		AddToStringArray(arr := stagingArrayRight, newString := remainingMaterial, numElements => , nextIndex => );
	END_IF
	
	
	
	remainingMaterial := materialsArr[i].right;
	WHILE FIND(remainingMaterial, '_') > 0 DO
		splitCombinedMaterials(remainingMaterial, splitMaterial);
		IF splitMaterial <> '' THEN
			AddToStringArray(arr := stagingArrayRight, newString := splitMaterial, numElements => , nextIndex => );
		END_IF
	END_WHILE
	
	IF remainingMaterial <> '' THEN
		AddToStringArray(arr := stagingArrayRight, newString := remainingMaterial, numElements => , nextIndex => );
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="generateStagingTemplate" Id="{f9c44c47-10b1-4c48-b55f-a72ead5d0dd8}" FolderPath="Template\">
      <Declaration><![CDATA[METHOD PROTECTED generateStagingTemplate : BOOL
VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[createStagingArrayLeft();
createStagingArrayRight();

(*
iterate through all pairs and autofill the template
replace succesfully autofilled materials with empty string

when staging needs to be performed a 2nd time, autofilling empty strings is always unsuccessful
*)
FOR i:=0 TO (GVL.maxPairs+1)*2 BY 1 DO
	IF stagingTemplateLeft.autofill(materialID := stagingArrayLeft[i]) THEN
		stagingArrayLeft[i] := '';
	END_IF
	
	IF stagingTemplateRight.autofill(materialID := stagingArrayRight[i]) THEN
		stagingArrayRight[i] := '';
	END_IF
END_FOR

generateStagingTemplate := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Action Name="homingSequence" Id="{434a2267-66b1-4552-9d2d-9e49da7500b6}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[insertionLeft.homingSequence();
insertionRight.homingSequence();
pistonBottom.retract();]]></ST>
      </Implementation>
    </Action>
    <Method Name="load" Id="{8d72f845-77bd-4833-8bd3-efb9da6c3eb6}">
      <Declaration><![CDATA[METHOD PROTECTED load : BOOL
VAR_INPUT
	pairIndex : INT;
END_VAR
VAR_OUTPUT
	error : BOOL;
END_VAR
VAR
	pair : REFERENCE TO PositionMaterials REF= materialsArr[pairIndex];
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}

CASE loadStep OF
	0: //top and bottom
		IF loadLeft.done AND loadRight.done THEN
			loadLeft.reset();
			loadRight.reset();
			
			loadLeft.execute := loadRight.execute := FALSE;
			loadStep := 10;
			RETURN;
		END_IF
		
		loadLeft.suctions := suctionTop;
		loadLeft.material := pair.top;
		
		loadRight.suctions := suctionBottom;
		loadRight.material := pair.bottom;
		
		loadLeft.execute := loadRight.execute := TRUE;
		
	10: //sides
		IF loadLeft.done AND loadRight.done THEN
			loadLeft.reset();
			loadRight.reset();
			
			loadLeft.execute := loadRight.execute := FALSE;
			loadStep := COMPLETE;
			RETURN;
		END_IF
		
		loadLeft.suctions := suctionLeft;
		loadLeft.material := pair.left;
		
		loadRight.suctions := suctionRight;
		loadRight.material := pair.right;
		
		loadLeft.execute := loadRight.execute := TRUE;
		
	COMPLETE:				
		robotLeft.release(sectionID);
		robotRight.release(sectionID);
		
		loadLeft.execute := loadRight.execute := FALSE;
		
		loadStep := 0;
		load := TRUE;
END_CASE
	
error := loadLeft.error OR loadRight.error;]]></ST>
      </Implementation>
    </Method>
    <Method Name="splitCombinedMaterials" Id="{5100a1ce-9f09-44e8-a796-baee79f8eccf}" FolderPath="Template\">
      <Declaration><![CDATA[METHOD splitCombinedMaterials : BOOL
VAR_IN_OUT
	materialID : STRING;
	splitMaterial : STRING;
END_VAR
VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FindAndSplitChar(
	sSeparatorChar:= '_', 
	pSrcString:= ADR(materialID), 
	
	pLeftString:= ADR(splitMaterial), 
	nLeftSize:= SIZEOF(splitMaterial), 
	
	pRightString:= ADR(materialID), 
	nRightSize:= SIZEOF(materialID), 
	
	bSearchFromRight:= FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="stage" Id="{369c79cb-d891-48d3-8b40-a140641ca5ca}">
      <Declaration><![CDATA[METHOD stage : BOOL
VAR_OUTPUT
	error : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}

CASE stageStep OF
	0: //generate staging template
		generateStagingTemplate();
		stageStep := 10;
		RETURN;
		
		IF templateLeft.done THEN
			templateLeft.execute := FALSE;
			
		END_IF
		
	10: //stage tables
		IF iSlotLeft > 10 AND iSlotRight > 10 THEN
			stageStep := COMPLETE;
			stageLeft.execute := stageRight.execute := FALSE;
			RETURN;
		END_IF
		
		stageLeft.execute := stageRight.execute := TRUE;
		
		//--------------------------------------------
		
		iSlotLeft := MAX(1, iSlotLeft); //if 0, sets to 1
		iSlotLeft := MIN(iSLotLeft, 10); //if 11, sets to 10 before reincrements back to 11
		
		IF stageLeft.done THEN
			iSlotLeft := iSlotLeft + 1;
			stageLeft.reset();
		END_IF
		
		//--------------------------------------------
		
		iSlotRight := MAX(1, iSlotRight);
		iSlotRight := MIN(iSlotRight, 10);
		
		IF stageRight.done THEN
			iSlotRight := iSlotRight + 1;
			stageRight.reset();
		END_IF
	
	COMPLETE:
		stageLeft.reset();
		stageRight.reset();
		
		robotLeft.release(sectionID);
		robotRight.release(sectionID);
		
		stageLeft.execute := stageRight.execute := FALSE;
		iSlotLeft := iSlotRight := 0;
		
		stage := TRUE;
END_CASE

error := stageLeft.error OR stageRight.error;
]]></ST>
      </Implementation>
    </Method>
    <Action Name="stopSequence" Id="{502b7e8e-3928-4ce8-afd1-e8d916fdb8d6}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[insertionLeft.stop();
insertionRight.stop();
pistonBottom.stop();

robotLeft.clearCommand();
robotRight.clearCommand();

//stop conveyors]]></ST>
      </Implementation>
    </Action>
    <Method Name="validateSuctionQuality" Id="{db8770c6-aea3-4e2f-a689-e3c1905a8195}">
      <Declaration><![CDATA[METHOD validateSuctionQuality : BOOL
VAR_INPUT
	checkTop : BOOL;
	checkLeft : BOOL;
	checkRight : BOOL;
	checkBottom : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[validateSuctionQuality := 
	(NOT checkTop OR_ELSE SuctionQuality(suctions:= suctionTop)) AND
	(NOT checkLeft OR_ELSE SuctionQuality(suctions:= suctionLeft)) AND
	(NOT checkRight OR_ELSE SuctionQuality(suctions:= suctionRight)) AND
	(NOT checkBottom OR_ELSE SuctionQuality(suctions:= suctionBottom));

(*
validateSuctionQuality := 
	(
		NOT checkTop OR_ELSE InsertionQuality(
			suctions:= suctionTop, 
			insertionMaterial:= loadedMaterials[Surface.TOP], 
			recipeMaterial:= materialsArr[iPair].top)
	) AND
	(
		NOT checkLeft OR_ELSE InsertionQuality(
			suctions:= suctionLeft, 
			insertionMaterial:= loadedMaterials[Surface.LEFT], 
			recipeMaterial:= materialsArr[iPair].left)
	) AND
	(
		NOT checkRight OR_ELSE InsertionQuality(
			suctions:= suctionRight, 
			insertionMaterial:= loadedMaterials[Surface.RIGHT], 
			recipeMaterial:= materialsArr[iPair].right)
	) AND
	(
		NOT checkBottom OR_ELSE InsertionQuality(
			suctions:= suctionBottom, 
			insertionMaterial:= loadedMaterials[Surface.BOTTOM], 
			recipeMaterial:= materialsArr[iPair].bottom)
	);
*)]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="WoodBunkEx_old">
      <LineId Id="6835" Count="0" />
      <LineId Id="7231" Count="0" />
      <LineId Id="7230" Count="0" />
      <LineId Id="6836" Count="77" />
      <LineId Id="7229" Count="0" />
      <LineId Id="6914" Count="79" />
      <LineId Id="7149" Count="0" />
      <LineId Id="6994" Count="0" />
      <LineId Id="4805" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx_old.blocks">
      <LineId Id="56" Count="6" />
      <LineId Id="54" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="65" Count="6" />
      <LineId Id="55" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="34" Count="19" />
      <LineId Id="32" Count="1" />
      <LineId Id="2" Count="27" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx_old.callLocalModules">
      <LineId Id="2" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="4" Count="23" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx_old.createStagingArrayLeft">
      <LineId Id="12" Count="3" />
      <LineId Id="44" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="18" Count="3" />
      <LineId Id="46" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="41" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="27" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx_old.createStagingArrayRight">
      <LineId Id="12" Count="3" />
      <LineId Id="44" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="18" Count="3" />
      <LineId Id="49" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="41" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="27" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx_old.generateStagingTemplate">
      <LineId Id="400" Count="9" />
      <LineId Id="411" Count="6" />
      <LineId Id="419" Count="0" />
      <LineId Id="430" Count="0" />
      <LineId Id="429" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx_old.homingSequence">
      <LineId Id="2" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx_old.load">
      <LineId Id="1193" Count="0" />
      <LineId Id="1405" Count="0" />
      <LineId Id="1107" Count="0" />
      <LineId Id="1360" Count="0" />
      <LineId Id="1415" Count="3" />
      <LineId Id="1463" Count="0" />
      <LineId Id="1419" Count="0" />
      <LineId Id="1421" Count="0" />
      <LineId Id="1414" Count="0" />
      <LineId Id="1432" Count="0" />
      <LineId Id="1375" Count="0" />
      <LineId Id="1378" Count="0" />
      <LineId Id="1494" Count="0" />
      <LineId Id="1376" Count="0" />
      <LineId Id="1380" Count="0" />
      <LineId Id="1464" Count="0" />
      <LineId Id="1495" Count="0" />
      <LineId Id="1137" Count="1" />
      <LineId Id="1407" Count="3" />
      <LineId Id="1502" Count="0" />
      <LineId Id="1411" Count="1" />
      <LineId Id="1406" Count="0" />
      <LineId Id="1413" Count="0" />
      <LineId Id="1382" Count="3" />
      <LineId Id="1381" Count="0" />
      <LineId Id="1497" Count="1" />
      <LineId Id="1330" Count="0" />
      <LineId Id="1185" Count="0" />
      <LineId Id="1189" Count="1" />
      <LineId Id="1500" Count="1" />
      <LineId Id="1191" Count="0" />
      <LineId Id="1503" Count="0" />
      <LineId Id="1192" Count="0" />
      <LineId Id="1361" Count="0" />
      <LineId Id="1493" Count="0" />
      <LineId Id="1390" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx_old.splitCombinedMaterials">
      <LineId Id="15" Count="2" />
      <LineId Id="29" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx_old.stage">
      <LineId Id="895" Count="0" />
      <LineId Id="1014" Count="1" />
      <LineId Id="1017" Count="0" />
      <LineId Id="1019" Count="1" />
      <LineId Id="1059" Count="0" />
      <LineId Id="1078" Count="0" />
      <LineId Id="1075" Count="1" />
      <LineId Id="1079" Count="0" />
      <LineId Id="1077" Count="0" />
      <LineId Id="1021" Count="1" />
      <LineId Id="1027" Count="1" />
      <LineId Id="1069" Count="0" />
      <LineId Id="1031" Count="0" />
      <LineId Id="1029" Count="0" />
      <LineId Id="1067" Count="1" />
      <LineId Id="1057" Count="1" />
      <LineId Id="1048" Count="0" />
      <LineId Id="1034" Count="7" />
      <LineId Id="1065" Count="1" />
      <LineId Id="1042" Count="5" />
      <LineId Id="1032" Count="0" />
      <LineId Id="1024" Count="1" />
      <LineId Id="1049" Count="4" />
      <LineId Id="1070" Count="0" />
      <LineId Id="1054" Count="0" />
      <LineId Id="1056" Count="0" />
      <LineId Id="1071" Count="0" />
      <LineId Id="1023" Count="0" />
      <LineId Id="1018" Count="0" />
      <LineId Id="972" Count="0" />
      <LineId Id="971" Count="0" />
      <LineId Id="1030" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx_old.stopSequence">
      <LineId Id="2" Count="4" />
      <LineId Id="1" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="WoodBunkEx_old.validateSuctionQuality">
      <LineId Id="76" Count="3" />
      <LineId Id="74" Count="1" />
      <LineId Id="72" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="42" Count="5" />
      <LineId Id="61" Count="0" />
      <LineId Id="48" Count="4" />
      <LineId Id="62" Count="0" />
      <LineId Id="53" Count="4" />
      <LineId Id="63" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="73" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>